
The_Osoed_automatic_guidance_system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052b8  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005440  08005440  00006440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005458  08005458  0000712c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005458  08005458  00006458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005460  08005460  0000712c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005460  08005460  00006460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005464  08005464  00006464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000012c  20000000  08005468  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000712c  2**0
                  CONTENTS
 10 .bss          000001f4  2000012c  2000012c  0000712c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000320  20000320  0000712c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000712c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010390  00000000  00000000  0000715c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002410  00000000  00000000  000174ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d50  00000000  00000000  00019900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a64  00000000  00000000  0001a650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021dea  00000000  00000000  0001b0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001112b  00000000  00000000  0003ce9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbf2c  00000000  00000000  0004dfc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00119ef5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003814  00000000  00000000  00119f38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008d  00000000  00000000  0011d74c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000012c 	.word	0x2000012c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005428 	.word	0x08005428

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000130 	.word	0x20000130
 80001c4:	08005428 	.word	0x08005428

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b988 	b.w	8000d2c <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	468e      	mov	lr, r1
 8000a3c:	4604      	mov	r4, r0
 8000a3e:	4688      	mov	r8, r1
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d14a      	bne.n	8000ada <__udivmoddi4+0xa6>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4617      	mov	r7, r2
 8000a48:	d962      	bls.n	8000b10 <__udivmoddi4+0xdc>
 8000a4a:	fab2 f682 	clz	r6, r2
 8000a4e:	b14e      	cbz	r6, 8000a64 <__udivmoddi4+0x30>
 8000a50:	f1c6 0320 	rsb	r3, r6, #32
 8000a54:	fa01 f806 	lsl.w	r8, r1, r6
 8000a58:	fa20 f303 	lsr.w	r3, r0, r3
 8000a5c:	40b7      	lsls	r7, r6
 8000a5e:	ea43 0808 	orr.w	r8, r3, r8
 8000a62:	40b4      	lsls	r4, r6
 8000a64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a68:	fa1f fc87 	uxth.w	ip, r7
 8000a6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a70:	0c23      	lsrs	r3, r4, #16
 8000a72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d909      	bls.n	8000a96 <__udivmoddi4+0x62>
 8000a82:	18fb      	adds	r3, r7, r3
 8000a84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a88:	f080 80ea 	bcs.w	8000c60 <__udivmoddi4+0x22c>
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	f240 80e7 	bls.w	8000c60 <__udivmoddi4+0x22c>
 8000a92:	3902      	subs	r1, #2
 8000a94:	443b      	add	r3, r7
 8000a96:	1a9a      	subs	r2, r3, r2
 8000a98:	b2a3      	uxth	r3, r4
 8000a9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000aa6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aaa:	459c      	cmp	ip, r3
 8000aac:	d909      	bls.n	8000ac2 <__udivmoddi4+0x8e>
 8000aae:	18fb      	adds	r3, r7, r3
 8000ab0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ab4:	f080 80d6 	bcs.w	8000c64 <__udivmoddi4+0x230>
 8000ab8:	459c      	cmp	ip, r3
 8000aba:	f240 80d3 	bls.w	8000c64 <__udivmoddi4+0x230>
 8000abe:	443b      	add	r3, r7
 8000ac0:	3802      	subs	r0, #2
 8000ac2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ac6:	eba3 030c 	sub.w	r3, r3, ip
 8000aca:	2100      	movs	r1, #0
 8000acc:	b11d      	cbz	r5, 8000ad6 <__udivmoddi4+0xa2>
 8000ace:	40f3      	lsrs	r3, r6
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d905      	bls.n	8000aea <__udivmoddi4+0xb6>
 8000ade:	b10d      	cbz	r5, 8000ae4 <__udivmoddi4+0xb0>
 8000ae0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4608      	mov	r0, r1
 8000ae8:	e7f5      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000aea:	fab3 f183 	clz	r1, r3
 8000aee:	2900      	cmp	r1, #0
 8000af0:	d146      	bne.n	8000b80 <__udivmoddi4+0x14c>
 8000af2:	4573      	cmp	r3, lr
 8000af4:	d302      	bcc.n	8000afc <__udivmoddi4+0xc8>
 8000af6:	4282      	cmp	r2, r0
 8000af8:	f200 8105 	bhi.w	8000d06 <__udivmoddi4+0x2d2>
 8000afc:	1a84      	subs	r4, r0, r2
 8000afe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b02:	2001      	movs	r0, #1
 8000b04:	4690      	mov	r8, r2
 8000b06:	2d00      	cmp	r5, #0
 8000b08:	d0e5      	beq.n	8000ad6 <__udivmoddi4+0xa2>
 8000b0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b0e:	e7e2      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000b10:	2a00      	cmp	r2, #0
 8000b12:	f000 8090 	beq.w	8000c36 <__udivmoddi4+0x202>
 8000b16:	fab2 f682 	clz	r6, r2
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	f040 80a4 	bne.w	8000c68 <__udivmoddi4+0x234>
 8000b20:	1a8a      	subs	r2, r1, r2
 8000b22:	0c03      	lsrs	r3, r0, #16
 8000b24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b28:	b280      	uxth	r0, r0
 8000b2a:	b2bc      	uxth	r4, r7
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d907      	bls.n	8000b52 <__udivmoddi4+0x11e>
 8000b42:	18fb      	adds	r3, r7, r3
 8000b44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b48:	d202      	bcs.n	8000b50 <__udivmoddi4+0x11c>
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	f200 80e0 	bhi.w	8000d10 <__udivmoddi4+0x2dc>
 8000b50:	46c4      	mov	ip, r8
 8000b52:	1a9b      	subs	r3, r3, r2
 8000b54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b60:	fb02 f404 	mul.w	r4, r2, r4
 8000b64:	429c      	cmp	r4, r3
 8000b66:	d907      	bls.n	8000b78 <__udivmoddi4+0x144>
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0x142>
 8000b70:	429c      	cmp	r4, r3
 8000b72:	f200 80ca 	bhi.w	8000d0a <__udivmoddi4+0x2d6>
 8000b76:	4602      	mov	r2, r0
 8000b78:	1b1b      	subs	r3, r3, r4
 8000b7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b7e:	e7a5      	b.n	8000acc <__udivmoddi4+0x98>
 8000b80:	f1c1 0620 	rsb	r6, r1, #32
 8000b84:	408b      	lsls	r3, r1
 8000b86:	fa22 f706 	lsr.w	r7, r2, r6
 8000b8a:	431f      	orrs	r7, r3
 8000b8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000b90:	fa20 f306 	lsr.w	r3, r0, r6
 8000b94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b9c:	4323      	orrs	r3, r4
 8000b9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ba2:	fa1f fc87 	uxth.w	ip, r7
 8000ba6:	fbbe f0f9 	udiv	r0, lr, r9
 8000baa:	0c1c      	lsrs	r4, r3, #16
 8000bac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000bb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000bb8:	45a6      	cmp	lr, r4
 8000bba:	fa02 f201 	lsl.w	r2, r2, r1
 8000bbe:	d909      	bls.n	8000bd4 <__udivmoddi4+0x1a0>
 8000bc0:	193c      	adds	r4, r7, r4
 8000bc2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000bc6:	f080 809c 	bcs.w	8000d02 <__udivmoddi4+0x2ce>
 8000bca:	45a6      	cmp	lr, r4
 8000bcc:	f240 8099 	bls.w	8000d02 <__udivmoddi4+0x2ce>
 8000bd0:	3802      	subs	r0, #2
 8000bd2:	443c      	add	r4, r7
 8000bd4:	eba4 040e 	sub.w	r4, r4, lr
 8000bd8:	fa1f fe83 	uxth.w	lr, r3
 8000bdc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000be0:	fb09 4413 	mls	r4, r9, r3, r4
 8000be4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000be8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bec:	45a4      	cmp	ip, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x1ce>
 8000bf0:	193c      	adds	r4, r7, r4
 8000bf2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000bf6:	f080 8082 	bcs.w	8000cfe <__udivmoddi4+0x2ca>
 8000bfa:	45a4      	cmp	ip, r4
 8000bfc:	d97f      	bls.n	8000cfe <__udivmoddi4+0x2ca>
 8000bfe:	3b02      	subs	r3, #2
 8000c00:	443c      	add	r4, r7
 8000c02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c06:	eba4 040c 	sub.w	r4, r4, ip
 8000c0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c0e:	4564      	cmp	r4, ip
 8000c10:	4673      	mov	r3, lr
 8000c12:	46e1      	mov	r9, ip
 8000c14:	d362      	bcc.n	8000cdc <__udivmoddi4+0x2a8>
 8000c16:	d05f      	beq.n	8000cd8 <__udivmoddi4+0x2a4>
 8000c18:	b15d      	cbz	r5, 8000c32 <__udivmoddi4+0x1fe>
 8000c1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000c1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c22:	fa04 f606 	lsl.w	r6, r4, r6
 8000c26:	fa22 f301 	lsr.w	r3, r2, r1
 8000c2a:	431e      	orrs	r6, r3
 8000c2c:	40cc      	lsrs	r4, r1
 8000c2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c32:	2100      	movs	r1, #0
 8000c34:	e74f      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000c36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c3a:	0c01      	lsrs	r1, r0, #16
 8000c3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c40:	b280      	uxth	r0, r0
 8000c42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c46:	463b      	mov	r3, r7
 8000c48:	4638      	mov	r0, r7
 8000c4a:	463c      	mov	r4, r7
 8000c4c:	46b8      	mov	r8, r7
 8000c4e:	46be      	mov	lr, r7
 8000c50:	2620      	movs	r6, #32
 8000c52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c56:	eba2 0208 	sub.w	r2, r2, r8
 8000c5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c5e:	e766      	b.n	8000b2e <__udivmoddi4+0xfa>
 8000c60:	4601      	mov	r1, r0
 8000c62:	e718      	b.n	8000a96 <__udivmoddi4+0x62>
 8000c64:	4610      	mov	r0, r2
 8000c66:	e72c      	b.n	8000ac2 <__udivmoddi4+0x8e>
 8000c68:	f1c6 0220 	rsb	r2, r6, #32
 8000c6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000c70:	40b7      	lsls	r7, r6
 8000c72:	40b1      	lsls	r1, r6
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c82:	b2bc      	uxth	r4, r7
 8000c84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c88:	0c11      	lsrs	r1, r2, #16
 8000c8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8e:	fb08 f904 	mul.w	r9, r8, r4
 8000c92:	40b0      	lsls	r0, r6
 8000c94:	4589      	cmp	r9, r1
 8000c96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c9a:	b280      	uxth	r0, r0
 8000c9c:	d93e      	bls.n	8000d1c <__udivmoddi4+0x2e8>
 8000c9e:	1879      	adds	r1, r7, r1
 8000ca0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ca4:	d201      	bcs.n	8000caa <__udivmoddi4+0x276>
 8000ca6:	4589      	cmp	r9, r1
 8000ca8:	d81f      	bhi.n	8000cea <__udivmoddi4+0x2b6>
 8000caa:	eba1 0109 	sub.w	r1, r1, r9
 8000cae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cb2:	fb09 f804 	mul.w	r8, r9, r4
 8000cb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cba:	b292      	uxth	r2, r2
 8000cbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cc0:	4542      	cmp	r2, r8
 8000cc2:	d229      	bcs.n	8000d18 <__udivmoddi4+0x2e4>
 8000cc4:	18ba      	adds	r2, r7, r2
 8000cc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000cca:	d2c4      	bcs.n	8000c56 <__udivmoddi4+0x222>
 8000ccc:	4542      	cmp	r2, r8
 8000cce:	d2c2      	bcs.n	8000c56 <__udivmoddi4+0x222>
 8000cd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000cd4:	443a      	add	r2, r7
 8000cd6:	e7be      	b.n	8000c56 <__udivmoddi4+0x222>
 8000cd8:	45f0      	cmp	r8, lr
 8000cda:	d29d      	bcs.n	8000c18 <__udivmoddi4+0x1e4>
 8000cdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ce0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ce4:	3801      	subs	r0, #1
 8000ce6:	46e1      	mov	r9, ip
 8000ce8:	e796      	b.n	8000c18 <__udivmoddi4+0x1e4>
 8000cea:	eba7 0909 	sub.w	r9, r7, r9
 8000cee:	4449      	add	r1, r9
 8000cf0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000cf4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cf8:	fb09 f804 	mul.w	r8, r9, r4
 8000cfc:	e7db      	b.n	8000cb6 <__udivmoddi4+0x282>
 8000cfe:	4673      	mov	r3, lr
 8000d00:	e77f      	b.n	8000c02 <__udivmoddi4+0x1ce>
 8000d02:	4650      	mov	r0, sl
 8000d04:	e766      	b.n	8000bd4 <__udivmoddi4+0x1a0>
 8000d06:	4608      	mov	r0, r1
 8000d08:	e6fd      	b.n	8000b06 <__udivmoddi4+0xd2>
 8000d0a:	443b      	add	r3, r7
 8000d0c:	3a02      	subs	r2, #2
 8000d0e:	e733      	b.n	8000b78 <__udivmoddi4+0x144>
 8000d10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d14:	443b      	add	r3, r7
 8000d16:	e71c      	b.n	8000b52 <__udivmoddi4+0x11e>
 8000d18:	4649      	mov	r1, r9
 8000d1a:	e79c      	b.n	8000c56 <__udivmoddi4+0x222>
 8000d1c:	eba1 0109 	sub.w	r1, r1, r9
 8000d20:	46c4      	mov	ip, r8
 8000d22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d26:	fb09 f804 	mul.w	r8, r9, r4
 8000d2a:	e7c4      	b.n	8000cb6 <__udivmoddi4+0x282>

08000d2c <__aeabi_idiv0>:
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop

08000d30 <Encoder_Init>:
  *
  * @example Пример вызова:
  *          Encoder encoder_AZ;
  *          Encoder_Init(&encoder_AZ); // Инициализация энкодера азимута
  */
void Encoder_Init(Encoder *Encoder_xx) { // Запуск моторов должен быть обязательно до начала инициализации Encoder. Движение в сторону минусовых углов
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  unsigned int New_value = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
  unsigned int Old_value = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	613b      	str	r3, [r7, #16]

  Motor *Motor_xx = (Encoder_xx == &Encoder_AZ) ? &Motor_AZ : &Motor_EL;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a1a      	ldr	r2, [pc, #104]	@ (8000dac <Encoder_Init+0x7c>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d101      	bne.n	8000d4c <Encoder_Init+0x1c>
 8000d48:	4b19      	ldr	r3, [pc, #100]	@ (8000db0 <Encoder_Init+0x80>)
 8000d4a:	e000      	b.n	8000d4e <Encoder_Init+0x1e>
 8000d4c:	4b19      	ldr	r3, [pc, #100]	@ (8000db4 <Encoder_Init+0x84>)
 8000d4e:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET); // Светодиодная индикация
 8000d50:	2201      	movs	r2, #1
 8000d52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d56:	4818      	ldr	r0, [pc, #96]	@ (8000db8 <Encoder_Init+0x88>)
 8000d58:	f001 ff5e 	bl	8002c18 <HAL_GPIO_WritePin>
  Motor_DirRot(Motor_xx, GPIO_PIN_RESET);
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	68f8      	ldr	r0, [r7, #12]
 8000d60:	f000 fb57 	bl	8001412 <Motor_DirRot>
  Motor_Start(Motor_xx);
 8000d64:	68f8      	ldr	r0, [r7, #12]
 8000d66:	f000 fbf7 	bl	8001558 <Motor_Start>

  do {
    Old_value = New_value;
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	613b      	str	r3, [r7, #16]
    HAL_Delay(1000);
 8000d6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d72:	f001 fbed 	bl	8002550 <HAL_Delay>
    New_value = Encoder_xx->Timer->Instance->CNT;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	691b      	ldr	r3, [r3, #16]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d7e:	617b      	str	r3, [r7, #20]
  } while (New_value != Old_value);
 8000d80:	697a      	ldr	r2, [r7, #20]
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d1f0      	bne.n	8000d6a <Encoder_Init+0x3a>

  Encoder_xx->Timer->Instance->CNT = 0;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	625a      	str	r2, [r3, #36]	@ 0x24

  Motor_Stop(Motor_xx);
 8000d92:	68f8      	ldr	r0, [r7, #12]
 8000d94:	f000 fc01 	bl	800159a <Motor_Stop>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d9e:	4806      	ldr	r0, [pc, #24]	@ (8000db8 <Encoder_Init+0x88>)
 8000da0:	f001 ff3a 	bl	8002c18 <HAL_GPIO_WritePin>
};
 8000da4:	bf00      	nop
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000090 	.word	0x20000090
 8000db4:	200000cc 	.word	0x200000cc
 8000db8:	40020c00 	.word	0x40020c00

08000dbc <Encoder_GetAngular>:


void Encoder_GetAngular(Encoder *Encoder_xx) {
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  unsigned short Encoder_value = Encoder_xx->Timer->Instance->CNT / 4;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	691b      	ldr	r3, [r3, #16]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dcc:	089b      	lsrs	r3, r3, #2
 8000dce:	81fb      	strh	r3, [r7, #14]
  (Encoder_xx == &Encoder_AZ) ?
		  (Systema_AZ.Actual_angular =
				  Systema_AZ.Config_angular.Minimum +
				  (float)Encoder_value *
				  (Systema_AZ.Config_angular.Maximum - Systema_AZ.Config_angular.Minimum) /
				  Encoder_xx->Puls.Pulses_per_revolution) :
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a24      	ldr	r2, [pc, #144]	@ (8000e64 <Encoder_GetAngular+0xa8>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d11f      	bne.n	8000e18 <Encoder_GetAngular+0x5c>
				  Systema_AZ.Config_angular.Minimum +
 8000dd8:	4b23      	ldr	r3, [pc, #140]	@ (8000e68 <Encoder_GetAngular+0xac>)
 8000dda:	ed93 7a01 	vldr	s14, [r3, #4]
				  (float)Encoder_value *
 8000dde:	89fb      	ldrh	r3, [r7, #14]
 8000de0:	ee07 3a90 	vmov	s15, r3
 8000de4:	eef8 6a67 	vcvt.f32.u32	s13, s15
				  (Systema_AZ.Config_angular.Maximum - Systema_AZ.Config_angular.Minimum) /
 8000de8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e68 <Encoder_GetAngular+0xac>)
 8000dea:	ed93 6a00 	vldr	s12, [r3]
 8000dee:	4b1e      	ldr	r3, [pc, #120]	@ (8000e68 <Encoder_GetAngular+0xac>)
 8000df0:	edd3 7a01 	vldr	s15, [r3, #4]
 8000df4:	ee76 7a67 	vsub.f32	s15, s12, s15
				  (float)Encoder_value *
 8000df8:	ee26 6aa7 	vmul.f32	s12, s13, s15
				  Encoder_xx->Puls.Pulses_per_revolution) :
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	8a9b      	ldrh	r3, [r3, #20]
 8000e00:	ee07 3a90 	vmov	s15, r3
				  (Systema_AZ.Config_angular.Maximum - Systema_AZ.Config_angular.Minimum) /
 8000e04:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e08:	eec6 7a26 	vdiv.f32	s15, s12, s13
				  Systema_AZ.Config_angular.Minimum +
 8000e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
		  (Systema_AZ.Actual_angular =
 8000e10:	4b15      	ldr	r3, [pc, #84]	@ (8000e68 <Encoder_GetAngular+0xac>)
 8000e12:	edc3 7a02 	vstr	s15, [r3, #8]
		  (Systema_EL.Actual_angular =
				  Systema_EL.Config_angular.Minimum +
				  (float)Encoder_value *
				  (Systema_EL.Config_angular.Maximum - Systema_EL.Config_angular.Minimum) /
				  Encoder_xx->Puls.Pulses_per_revolution);
};
 8000e16:	e01e      	b.n	8000e56 <Encoder_GetAngular+0x9a>
				  Systema_EL.Config_angular.Minimum +
 8000e18:	4b14      	ldr	r3, [pc, #80]	@ (8000e6c <Encoder_GetAngular+0xb0>)
 8000e1a:	ed93 7a01 	vldr	s14, [r3, #4]
				  (float)Encoder_value *
 8000e1e:	89fb      	ldrh	r3, [r7, #14]
 8000e20:	ee07 3a90 	vmov	s15, r3
 8000e24:	eef8 6a67 	vcvt.f32.u32	s13, s15
				  (Systema_EL.Config_angular.Maximum - Systema_EL.Config_angular.Minimum) /
 8000e28:	4b10      	ldr	r3, [pc, #64]	@ (8000e6c <Encoder_GetAngular+0xb0>)
 8000e2a:	ed93 6a00 	vldr	s12, [r3]
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e6c <Encoder_GetAngular+0xb0>)
 8000e30:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e34:	ee76 7a67 	vsub.f32	s15, s12, s15
				  (float)Encoder_value *
 8000e38:	ee26 6aa7 	vmul.f32	s12, s13, s15
				  Encoder_xx->Puls.Pulses_per_revolution);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	8a9b      	ldrh	r3, [r3, #20]
 8000e40:	ee07 3a90 	vmov	s15, r3
				  (Systema_EL.Config_angular.Maximum - Systema_EL.Config_angular.Minimum) /
 8000e44:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e48:	eec6 7a26 	vdiv.f32	s15, s12, s13
				  Systema_EL.Config_angular.Minimum +
 8000e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
		  (Systema_EL.Actual_angular =
 8000e50:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <Encoder_GetAngular+0xb0>)
 8000e52:	edc3 7a02 	vstr	s15, [r3, #8]
};
 8000e56:	bf00      	nop
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000000 	.word	0x20000000
 8000e68:	20000108 	.word	0x20000108
 8000e6c:	20000114 	.word	0x20000114

08000e70 <Mode_Manual>:
  .Buffer_differens_angular = {0},
  .Index_buffer = 0,
  .Requirement_stop = 'N'
};

void Mode_Manual(Motor *Motor_xx) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if (Motor_xx == &Motor_AZ ? RP_message.Azimuth : RP_message.Elevation) {
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a33      	ldr	r2, [pc, #204]	@ (8000f48 <Mode_Manual+0xd8>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d10b      	bne.n	8000e98 <Mode_Manual+0x28>
 8000e80:	4b32      	ldr	r3, [pc, #200]	@ (8000f4c <Mode_Manual+0xdc>)
 8000e82:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000e86:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e8e:	bf14      	ite	ne
 8000e90:	2301      	movne	r3, #1
 8000e92:	2300      	moveq	r3, #0
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	e00a      	b.n	8000eae <Mode_Manual+0x3e>
 8000e98:	4b2c      	ldr	r3, [pc, #176]	@ (8000f4c <Mode_Manual+0xdc>)
 8000e9a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000e9e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea6:	bf14      	ite	ne
 8000ea8:	2301      	movne	r3, #1
 8000eaa:	2300      	moveq	r3, #0
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d043      	beq.n	8000f3a <Mode_Manual+0xca>
    if (Motor_xx->State.Functioning) {
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d01b      	beq.n	8000ef4 <Mode_Manual+0x84>
      Motor_xx->State.New_value_tik = TIM5->CNT;
 8000ebc:	4b24      	ldr	r3, [pc, #144]	@ (8000f50 <Mode_Manual+0xe0>)
 8000ebe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	639a      	str	r2, [r3, #56]	@ 0x38
      if (abs(Motor_xx->State.New_value_tik - Motor_xx->State.Old_value_tik) / TIM5->PSC > 2000) {
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	bfb8      	it	lt
 8000ed2:	425b      	neglt	r3, r3
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f50 <Mode_Manual+0xe0>)
 8000ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ede:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000ee2:	d92d      	bls.n	8000f40 <Mode_Manual+0xd0>
    	Motor_xx->State.Old_value_tik = Motor_xx->State.New_value_tik;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	635a      	str	r2, [r3, #52]	@ 0x34
        Motor_UpFrequency(Motor_xx);}
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f000 fb0f 	bl	8001510 <Motor_UpFrequency>
    } else {
      Motor_DirRot(Motor_xx, (Motor_xx == &Motor_AZ ? RP_message.Azimuth : RP_message.Elevation) > 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
      Motor_Start(Motor_xx);
    };
  } else {Motor_Stop(Motor_xx);};
};
 8000ef2:	e025      	b.n	8000f40 <Mode_Manual+0xd0>
      Motor_DirRot(Motor_xx, (Motor_xx == &Motor_AZ ? RP_message.Azimuth : RP_message.Elevation) > 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a14      	ldr	r2, [pc, #80]	@ (8000f48 <Mode_Manual+0xd8>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d10b      	bne.n	8000f14 <Mode_Manual+0xa4>
 8000efc:	4b13      	ldr	r3, [pc, #76]	@ (8000f4c <Mode_Manual+0xdc>)
 8000efe:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000f02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f0a:	bfcc      	ite	gt
 8000f0c:	2301      	movgt	r3, #1
 8000f0e:	2300      	movle	r3, #0
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	e00a      	b.n	8000f2a <Mode_Manual+0xba>
 8000f14:	4b0d      	ldr	r3, [pc, #52]	@ (8000f4c <Mode_Manual+0xdc>)
 8000f16:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000f1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f22:	bfcc      	ite	gt
 8000f24:	2301      	movgt	r3, #1
 8000f26:	2300      	movle	r3, #0
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f000 fa70 	bl	8001412 <Motor_DirRot>
      Motor_Start(Motor_xx);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f000 fb10 	bl	8001558 <Motor_Start>
};
 8000f38:	e002      	b.n	8000f40 <Mode_Manual+0xd0>
  } else {Motor_Stop(Motor_xx);};
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f000 fb2d 	bl	800159a <Motor_Stop>
};
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000090 	.word	0x20000090
 8000f4c:	20000060 	.word	0x20000060
 8000f50:	40000c00 	.word	0x40000c00

08000f54 <Mode_Semi_automatic>:

void Mode_Semi_automatic(Motor *Motor_xx) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  if (Motor_xx == &Motor_AZ ? abs(RP_message.Azimuth - Systema_AZ.Actual_angular) != 0 : abs(RP_message.Elevation - Systema_EL.Actual_angular) != 0) {
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a3e      	ldr	r2, [pc, #248]	@ (8001058 <Mode_Semi_automatic+0x104>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d111      	bne.n	8000f88 <Mode_Semi_automatic+0x34>
 8000f64:	4b3d      	ldr	r3, [pc, #244]	@ (800105c <Mode_Semi_automatic+0x108>)
 8000f66:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8000f6a:	4b3d      	ldr	r3, [pc, #244]	@ (8001060 <Mode_Semi_automatic+0x10c>)
 8000f6c:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f78:	ee17 3a90 	vmov	r3, s15
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	bf14      	ite	ne
 8000f80:	2301      	movne	r3, #1
 8000f82:	2300      	moveq	r3, #0
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	e010      	b.n	8000faa <Mode_Semi_automatic+0x56>
 8000f88:	4b34      	ldr	r3, [pc, #208]	@ (800105c <Mode_Semi_automatic+0x108>)
 8000f8a:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8000f8e:	4b35      	ldr	r3, [pc, #212]	@ (8001064 <Mode_Semi_automatic+0x110>)
 8000f90:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f9c:	ee17 3a90 	vmov	r3, s15
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	bf14      	ite	ne
 8000fa4:	2301      	movne	r3, #1
 8000fa6:	2300      	moveq	r3, #0
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d04d      	beq.n	800104a <Mode_Semi_automatic+0xf6>
    if (Motor_xx->State.Functioning) {
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d01b      	beq.n	8000ff0 <Mode_Semi_automatic+0x9c>
      Motor_xx->State.New_value_tik = TIM5->CNT;
 8000fb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001068 <Mode_Semi_automatic+0x114>)
 8000fba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	639a      	str	r2, [r3, #56]	@ 0x38
      if (abs(Motor_xx->State.New_value_tik - Motor_xx->State.Old_value_tik) / TIM5->PSC > 2000) {
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	bfb8      	it	lt
 8000fce:	425b      	neglt	r3, r3
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b25      	ldr	r3, [pc, #148]	@ (8001068 <Mode_Semi_automatic+0x114>)
 8000fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fda:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000fde:	d937      	bls.n	8001050 <Mode_Semi_automatic+0xfc>
    	Motor_xx->State.Old_value_tik = Motor_xx->State.New_value_tik;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	635a      	str	r2, [r3, #52]	@ 0x34
        Motor_UpFrequency(Motor_xx);}
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f000 fa91 	bl	8001510 <Motor_UpFrequency>
    } else {
      Motor_DirRot(Motor_xx, (Motor_xx == &Motor_AZ ? RP_message.Azimuth - Systema_AZ.Actual_angular : RP_message.Elevation - Systema_EL.Actual_angular) > 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
      Motor_Start(Motor_xx);
    };
  } else {Motor_Stop(Motor_xx);};
};
 8000fee:	e02f      	b.n	8001050 <Mode_Semi_automatic+0xfc>
      Motor_DirRot(Motor_xx, (Motor_xx == &Motor_AZ ? RP_message.Azimuth - Systema_AZ.Actual_angular : RP_message.Elevation - Systema_EL.Actual_angular) > 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a19      	ldr	r2, [pc, #100]	@ (8001058 <Mode_Semi_automatic+0x104>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d110      	bne.n	800101a <Mode_Semi_automatic+0xc6>
 8000ff8:	4b18      	ldr	r3, [pc, #96]	@ (800105c <Mode_Semi_automatic+0x108>)
 8000ffa:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8000ffe:	4b18      	ldr	r3, [pc, #96]	@ (8001060 <Mode_Semi_automatic+0x10c>)
 8001000:	edd3 7a02 	vldr	s15, [r3, #8]
 8001004:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001008:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800100c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001010:	bfcc      	ite	gt
 8001012:	2301      	movgt	r3, #1
 8001014:	2300      	movle	r3, #0
 8001016:	b2db      	uxtb	r3, r3
 8001018:	e00f      	b.n	800103a <Mode_Semi_automatic+0xe6>
 800101a:	4b10      	ldr	r3, [pc, #64]	@ (800105c <Mode_Semi_automatic+0x108>)
 800101c:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001020:	4b10      	ldr	r3, [pc, #64]	@ (8001064 <Mode_Semi_automatic+0x110>)
 8001022:	edd3 7a02 	vldr	s15, [r3, #8]
 8001026:	ee77 7a67 	vsub.f32	s15, s14, s15
 800102a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800102e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001032:	bfcc      	ite	gt
 8001034:	2301      	movgt	r3, #1
 8001036:	2300      	movle	r3, #0
 8001038:	b2db      	uxtb	r3, r3
 800103a:	4619      	mov	r1, r3
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 f9e8 	bl	8001412 <Motor_DirRot>
      Motor_Start(Motor_xx);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 fa88 	bl	8001558 <Motor_Start>
};
 8001048:	e002      	b.n	8001050 <Mode_Semi_automatic+0xfc>
  } else {Motor_Stop(Motor_xx);};
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 faa5 	bl	800159a <Motor_Stop>
};
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000090 	.word	0x20000090
 800105c:	20000060 	.word	0x20000060
 8001060:	20000108 	.word	0x20000108
 8001064:	20000114 	.word	0x20000114
 8001068:	40000c00 	.word	0x40000c00

0800106c <Mode_Moving_away_from_borders>:

void Mode_Moving_away_from_borders(Motor *Motor_xx, float Incremtnt_limit) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	ed87 0a00 	vstr	s0, [r7]
  Encoder *Encoder_xx = Motor_xx == &Motor_AZ ? &Encoder_AZ : &Encoder_EL;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a1b      	ldr	r2, [pc, #108]	@ (80010e8 <Mode_Moving_away_from_borders+0x7c>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d101      	bne.n	8001084 <Mode_Moving_away_from_borders+0x18>
 8001080:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <Mode_Moving_away_from_borders+0x80>)
 8001082:	e000      	b.n	8001086 <Mode_Moving_away_from_borders+0x1a>
 8001084:	4b1a      	ldr	r3, [pc, #104]	@ (80010f0 <Mode_Moving_away_from_borders+0x84>)
 8001086:	60fb      	str	r3, [r7, #12]
  Systems *Systema_xx = Motor_xx == &Motor_AZ ? &Systema_AZ : &Systema_EL;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a17      	ldr	r2, [pc, #92]	@ (80010e8 <Mode_Moving_away_from_borders+0x7c>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d101      	bne.n	8001094 <Mode_Moving_away_from_borders+0x28>
 8001090:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <Mode_Moving_away_from_borders+0x88>)
 8001092:	e000      	b.n	8001096 <Mode_Moving_away_from_borders+0x2a>
 8001094:	4b18      	ldr	r3, [pc, #96]	@ (80010f8 <Mode_Moving_away_from_borders+0x8c>)
 8001096:	60bb      	str	r3, [r7, #8]
  Motor_DirRot(Motor_xx, Systema_xx->Actual_angular > 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	edd3 7a02 	vldr	s15, [r3, #8]
 800109e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a6:	bfcc      	ite	gt
 80010a8:	2301      	movgt	r3, #1
 80010aa:	2300      	movle	r3, #0
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	f083 0301 	eor.w	r3, r3, #1
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	4619      	mov	r1, r3
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f000 f9aa 	bl	8001412 <Motor_DirRot>
  Motor_Start(Motor_xx);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 fa4a 	bl	8001558 <Motor_Start>
  do {Encoder_GetAngular(Encoder_xx);} while (!System_CheckLimit(Systema_xx, Incremtnt_limit));
 80010c4:	68f8      	ldr	r0, [r7, #12]
 80010c6:	f7ff fe79 	bl	8000dbc <Encoder_GetAngular>
 80010ca:	ed97 0a00 	vldr	s0, [r7]
 80010ce:	68b8      	ldr	r0, [r7, #8]
 80010d0:	f000 fa84 	bl	80015dc <System_CheckLimit>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0f4      	beq.n	80010c4 <Mode_Moving_away_from_borders+0x58>
  Motor_Stop(Motor_xx);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 fa5d 	bl	800159a <Motor_Stop>
};
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000090 	.word	0x20000090
 80010ec:	20000000 	.word	0x20000000
 80010f0:	2000001c 	.word	0x2000001c
 80010f4:	20000108 	.word	0x20000108
 80010f8:	20000114 	.word	0x20000114
 80010fc:	00000000 	.word	0x00000000

08001100 <Mode_Automatic>:

void Mode_Automatic(Motor *Motor_xx) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  Mode_Automatic_data *Automatic_data_xx = Motor_xx == &Motor_AZ ? &Automatic_data_AZ : &Automatic_data_EL;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a67      	ldr	r2, [pc, #412]	@ (80012a8 <Mode_Automatic+0x1a8>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d101      	bne.n	8001114 <Mode_Automatic+0x14>
 8001110:	4b66      	ldr	r3, [pc, #408]	@ (80012ac <Mode_Automatic+0x1ac>)
 8001112:	e000      	b.n	8001116 <Mode_Automatic+0x16>
 8001114:	4b66      	ldr	r3, [pc, #408]	@ (80012b0 <Mode_Automatic+0x1b0>)
 8001116:	61fb      	str	r3, [r7, #28]

  if (Motor_xx->State.Functioning == 0 && Automatic_data_xx->Requirement_stop == 'N') {
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800111e:	2b00      	cmp	r3, #0
 8001120:	d126      	bne.n	8001170 <Mode_Automatic+0x70>
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	7c5b      	ldrb	r3, [r3, #17]
 8001126:	2b4e      	cmp	r3, #78	@ 0x4e
 8001128:	d122      	bne.n	8001170 <Mode_Automatic+0x70>
    Motor_DirRot(Motor_xx, (Motor_xx == &Motor_AZ ? RP_message.Azimuth : RP_message.Elevation) > 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a5e      	ldr	r2, [pc, #376]	@ (80012a8 <Mode_Automatic+0x1a8>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d10b      	bne.n	800114a <Mode_Automatic+0x4a>
 8001132:	4b60      	ldr	r3, [pc, #384]	@ (80012b4 <Mode_Automatic+0x1b4>)
 8001134:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001138:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800113c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001140:	bfcc      	ite	gt
 8001142:	2301      	movgt	r3, #1
 8001144:	2300      	movle	r3, #0
 8001146:	b2db      	uxtb	r3, r3
 8001148:	e00a      	b.n	8001160 <Mode_Automatic+0x60>
 800114a:	4b5a      	ldr	r3, [pc, #360]	@ (80012b4 <Mode_Automatic+0x1b4>)
 800114c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001150:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001158:	bfcc      	ite	gt
 800115a:	2301      	movgt	r3, #1
 800115c:	2300      	movle	r3, #0
 800115e:	b2db      	uxtb	r3, r3
 8001160:	4619      	mov	r1, r3
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 f955 	bl	8001412 <Motor_DirRot>
    Motor_Start(Motor_xx);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 f9f5 	bl	8001558 <Motor_Start>
	    Motor_xx->State.Old_value_tik = Motor_xx->State.New_value_tik;
	    Motor_SetFrequency(Motor_xx, Frequensy);
	  };
	};
  };
};
 800116e:	e092      	b.n	8001296 <Mode_Automatic+0x196>
	if (Automatic_data_xx->Requirement_stop == 'Y') {
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	7c5b      	ldrb	r3, [r3, #17]
 8001174:	2b59      	cmp	r3, #89	@ 0x59
 8001176:	d103      	bne.n	8001180 <Mode_Automatic+0x80>
	  Motor_Stop(Motor_xx);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 fa0e 	bl	800159a <Motor_Stop>
};
 800117e:	e08a      	b.n	8001296 <Mode_Automatic+0x196>
	    (Motor_AZ.Setting.Frequency.Maximum_pulse) - (Motor_AZ.Setting.Frequency.Minimum_pulse) - 500:
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a49      	ldr	r2, [pc, #292]	@ (80012a8 <Mode_Automatic+0x1a8>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d107      	bne.n	8001198 <Mode_Automatic+0x98>
 8001188:	4b47      	ldr	r3, [pc, #284]	@ (80012a8 <Mode_Automatic+0x1a8>)
 800118a:	699a      	ldr	r2, [r3, #24]
 800118c:	4b46      	ldr	r3, [pc, #280]	@ (80012a8 <Mode_Automatic+0x1a8>)
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001196:	e006      	b.n	80011a6 <Mode_Automatic+0xa6>
		(Motor_EL.Setting.Frequency.Maximum_pulse) - (Motor_EL.Setting.Frequency.Minimum_pulse) - 500;
 8001198:	4b47      	ldr	r3, [pc, #284]	@ (80012b8 <Mode_Automatic+0x1b8>)
 800119a:	699a      	ldr	r2, [r3, #24]
 800119c:	4b46      	ldr	r3, [pc, #280]	@ (80012b8 <Mode_Automatic+0x1b8>)
 800119e:	69db      	ldr	r3, [r3, #28]
 80011a0:	1ad3      	subs	r3, r2, r3
	    (Motor_AZ.Setting.Frequency.Maximum_pulse) - (Motor_AZ.Setting.Frequency.Minimum_pulse) - 500:
 80011a2:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
	  unsigned int Frequency_range =
 80011a6:	61bb      	str	r3, [r7, #24]
	  float Error_angular_range = Motor_xx == &Motor_AZ ? 60.0f : 20.0f;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a3f      	ldr	r2, [pc, #252]	@ (80012a8 <Mode_Automatic+0x1a8>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d101      	bne.n	80011b4 <Mode_Automatic+0xb4>
 80011b0:	4b42      	ldr	r3, [pc, #264]	@ (80012bc <Mode_Automatic+0x1bc>)
 80011b2:	e000      	b.n	80011b6 <Mode_Automatic+0xb6>
 80011b4:	4b42      	ldr	r3, [pc, #264]	@ (80012c0 <Mode_Automatic+0x1c0>)
 80011b6:	617b      	str	r3, [r7, #20]
	  Automatic_data_xx->Buffer_differens_angular[1] = Automatic_data_xx->Buffer_differens_angular[0];
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	605a      	str	r2, [r3, #4]
	  Automatic_data_xx->Buffer_differens_angular[0] = Motor_xx == &Motor_AZ ? RP_message.Azimuth : RP_message.Elevation;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a39      	ldr	r2, [pc, #228]	@ (80012a8 <Mode_Automatic+0x1a8>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d102      	bne.n	80011ce <Mode_Automatic+0xce>
 80011c8:	4b3a      	ldr	r3, [pc, #232]	@ (80012b4 <Mode_Automatic+0x1b4>)
 80011ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011cc:	e001      	b.n	80011d2 <Mode_Automatic+0xd2>
 80011ce:	4b39      	ldr	r3, [pc, #228]	@ (80012b4 <Mode_Automatic+0x1b4>)
 80011d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011d2:	69fa      	ldr	r2, [r7, #28]
 80011d4:	6013      	str	r3, [r2, #0]
	  Automatic_data_xx->Buffer_speed[1] = Automatic_data_xx->Buffer_speed[0];
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	60da      	str	r2, [r3, #12]
	  Automatic_data_xx->Buffer_speed[0] = (Automatic_data_xx->Buffer_differens_angular[0] - Automatic_data_xx->Buffer_differens_angular[1]) / 0.05;
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	ed93 7a00 	vldr	s14, [r3]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80011ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ee:	ee17 0a90 	vmov	r0, s15
 80011f2:	f7ff f94d 	bl	8000490 <__aeabi_f2d>
 80011f6:	a32a      	add	r3, pc, #168	@ (adr r3, 80012a0 <Mode_Automatic+0x1a0>)
 80011f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fc:	f7ff faca 	bl	8000794 <__aeabi_ddiv>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4610      	mov	r0, r2
 8001206:	4619      	mov	r1, r3
 8001208:	f7ff fbac 	bl	8000964 <__aeabi_d2f>
 800120c:	4602      	mov	r2, r0
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	609a      	str	r2, [r3, #8]
	  float Increment_speed = Automatic_data_xx->Buffer_speed[0] - Automatic_data_xx->Buffer_speed[1];
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	ed93 7a02 	vldr	s14, [r3, #8]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	edd3 7a03 	vldr	s15, [r3, #12]
 800121e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001222:	edc7 7a04 	vstr	s15, [r7, #16]
	  unsigned int Increment_frequensy = (int)Increment_speed * Frequency_range / Error_angular_range;
 8001226:	edd7 7a04 	vldr	s15, [r7, #16]
 800122a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800122e:	ee17 2a90 	vmov	r2, s15
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	fb02 f303 	mul.w	r3, r2, r3
 8001238:	ee07 3a90 	vmov	s15, r3
 800123c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001240:	ed97 7a05 	vldr	s14, [r7, #20]
 8001244:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001248:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800124c:	ee17 3a90 	vmov	r3, s15
 8001250:	60fb      	str	r3, [r7, #12]
	  unsigned int Frequensy = Motor_xx->State.Frequency + Increment_frequensy;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	4413      	add	r3, r2
 800125a:	60bb      	str	r3, [r7, #8]
	  Motor_xx->State.New_value_tik = TIM5->CNT;
 800125c:	4b19      	ldr	r3, [pc, #100]	@ (80012c4 <Mode_Automatic+0x1c4>)
 800125e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	639a      	str	r2, [r3, #56]	@ 0x38
	  if (abs(Motor_xx->State.New_value_tik - Motor_xx->State.Old_value_tik) / TIM5->PSC > 5000) {
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	bfb8      	it	lt
 8001272:	425b      	neglt	r3, r3
 8001274:	461a      	mov	r2, r3
 8001276:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <Mode_Automatic+0x1c4>)
 8001278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800127a:	fbb2 f3f3 	udiv	r3, r2, r3
 800127e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001282:	4293      	cmp	r3, r2
 8001284:	d907      	bls.n	8001296 <Mode_Automatic+0x196>
	    Motor_xx->State.Old_value_tik = Motor_xx->State.New_value_tik;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	635a      	str	r2, [r3, #52]	@ 0x34
	    Motor_SetFrequency(Motor_xx, Frequensy);
 800128e:	68b9      	ldr	r1, [r7, #8]
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f000 f8db 	bl	800144c <Motor_SetFrequency>
};
 8001296:	bf00      	nop
 8001298:	3720      	adds	r7, #32
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	9999999a 	.word	0x9999999a
 80012a4:	3fa99999 	.word	0x3fa99999
 80012a8:	20000090 	.word	0x20000090
 80012ac:	20000038 	.word	0x20000038
 80012b0:	2000004c 	.word	0x2000004c
 80012b4:	20000060 	.word	0x20000060
 80012b8:	200000cc 	.word	0x200000cc
 80012bc:	42700000 	.word	0x42700000
 80012c0:	41a00000 	.word	0x41a00000
 80012c4:	40000c00 	.word	0x40000c00

080012c8 <Raspberry_DatPpars>:
  .Rx_data = "Az+0000El-0000M0F0\r\n\0",
  .Tx_data = "T0000000000\r\n",
  .transmitting = 0
};

void Raspberry_DatPpars(void) {
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  RP_message.Rx_data[20] = '\0';
 80012cc:	4b40      	ldr	r3, [pc, #256]	@ (80013d0 <Raspberry_DatPpars+0x108>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	765a      	strb	r2, [r3, #25]

  RP_message.Azimuth =
    (RP_message.Rx_data[3]  - '0') * 100.0f +
 80012d2:	4b3f      	ldr	r3, [pc, #252]	@ (80013d0 <Raspberry_DatPpars+0x108>)
 80012d4:	7a1b      	ldrb	r3, [r3, #8]
 80012d6:	3b30      	subs	r3, #48	@ 0x30
 80012d8:	ee07 3a90 	vmov	s15, r3
 80012dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e0:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80013d4 <Raspberry_DatPpars+0x10c>
 80012e4:	ee27 7a87 	vmul.f32	s14, s15, s14
    (RP_message.Rx_data[4]  - '0') * 10.0f +
 80012e8:	4b39      	ldr	r3, [pc, #228]	@ (80013d0 <Raspberry_DatPpars+0x108>)
 80012ea:	7a5b      	ldrb	r3, [r3, #9]
 80012ec:	3b30      	subs	r3, #48	@ 0x30
 80012ee:	ee07 3a90 	vmov	s15, r3
 80012f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80012fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
    (RP_message.Rx_data[3]  - '0') * 100.0f +
 80012fe:	ee37 7a27 	vadd.f32	s14, s14, s15
    (RP_message.Rx_data[5]  - '0') +
 8001302:	4b33      	ldr	r3, [pc, #204]	@ (80013d0 <Raspberry_DatPpars+0x108>)
 8001304:	7a9b      	ldrb	r3, [r3, #10]
 8001306:	3b30      	subs	r3, #48	@ 0x30
    (RP_message.Rx_data[4]  - '0') * 10.0f +
 8001308:	ee07 3a90 	vmov	s15, r3
 800130c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001310:	ee37 7a27 	vadd.f32	s14, s14, s15
    (RP_message.Rx_data[6]  - '0') * 0.1f;
 8001314:	4b2e      	ldr	r3, [pc, #184]	@ (80013d0 <Raspberry_DatPpars+0x108>)
 8001316:	7adb      	ldrb	r3, [r3, #11]
 8001318:	3b30      	subs	r3, #48	@ 0x30
 800131a:	ee07 3a90 	vmov	s15, r3
 800131e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001322:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 80013d8 <Raspberry_DatPpars+0x110>
 8001326:	ee67 7aa6 	vmul.f32	s15, s15, s13
    (RP_message.Rx_data[5]  - '0') +
 800132a:	ee77 7a27 	vadd.f32	s15, s14, s15
  RP_message.Azimuth =
 800132e:	4b28      	ldr	r3, [pc, #160]	@ (80013d0 <Raspberry_DatPpars+0x108>)
 8001330:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
  if (RP_message.Rx_data[2] == '-') RP_message.Azimuth = -RP_message.Azimuth;
 8001334:	4b26      	ldr	r3, [pc, #152]	@ (80013d0 <Raspberry_DatPpars+0x108>)
 8001336:	79db      	ldrb	r3, [r3, #7]
 8001338:	2b2d      	cmp	r3, #45	@ 0x2d
 800133a:	d107      	bne.n	800134c <Raspberry_DatPpars+0x84>
 800133c:	4b24      	ldr	r3, [pc, #144]	@ (80013d0 <Raspberry_DatPpars+0x108>)
 800133e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001342:	eef1 7a67 	vneg.f32	s15, s15
 8001346:	4b22      	ldr	r3, [pc, #136]	@ (80013d0 <Raspberry_DatPpars+0x108>)
 8001348:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

  RP_message.Elevation =
    (RP_message.Rx_data[10] - '0') * 100.0f +
 800134c:	4b20      	ldr	r3, [pc, #128]	@ (80013d0 <Raspberry_DatPpars+0x108>)
 800134e:	7bdb      	ldrb	r3, [r3, #15]
 8001350:	3b30      	subs	r3, #48	@ 0x30
 8001352:	ee07 3a90 	vmov	s15, r3
 8001356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800135a:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80013d4 <Raspberry_DatPpars+0x10c>
 800135e:	ee27 7a87 	vmul.f32	s14, s15, s14
    (RP_message.Rx_data[11] - '0') * 10.0f +
 8001362:	4b1b      	ldr	r3, [pc, #108]	@ (80013d0 <Raspberry_DatPpars+0x108>)
 8001364:	7c1b      	ldrb	r3, [r3, #16]
 8001366:	3b30      	subs	r3, #48	@ 0x30
 8001368:	ee07 3a90 	vmov	s15, r3
 800136c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001370:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001374:	ee67 7aa6 	vmul.f32	s15, s15, s13
    (RP_message.Rx_data[10] - '0') * 100.0f +
 8001378:	ee37 7a27 	vadd.f32	s14, s14, s15
    (RP_message.Rx_data[12] - '0') +
 800137c:	4b14      	ldr	r3, [pc, #80]	@ (80013d0 <Raspberry_DatPpars+0x108>)
 800137e:	7c5b      	ldrb	r3, [r3, #17]
 8001380:	3b30      	subs	r3, #48	@ 0x30
    (RP_message.Rx_data[11] - '0') * 10.0f +
 8001382:	ee07 3a90 	vmov	s15, r3
 8001386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800138a:	ee37 7a27 	vadd.f32	s14, s14, s15
    (RP_message.Rx_data[13] - '0') * 0.1f;
 800138e:	4b10      	ldr	r3, [pc, #64]	@ (80013d0 <Raspberry_DatPpars+0x108>)
 8001390:	7c9b      	ldrb	r3, [r3, #18]
 8001392:	3b30      	subs	r3, #48	@ 0x30
 8001394:	ee07 3a90 	vmov	s15, r3
 8001398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800139c:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80013d8 <Raspberry_DatPpars+0x110>
 80013a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
    (RP_message.Rx_data[12] - '0') +
 80013a4:	ee77 7a27 	vadd.f32	s15, s14, s15
  RP_message.Elevation =
 80013a8:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <Raspberry_DatPpars+0x108>)
 80013aa:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
  if (RP_message.Rx_data[9] == '-') RP_message.Elevation = -RP_message.Elevation;
 80013ae:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <Raspberry_DatPpars+0x108>)
 80013b0:	7b9b      	ldrb	r3, [r3, #14]
 80013b2:	2b2d      	cmp	r3, #45	@ 0x2d
 80013b4:	d107      	bne.n	80013c6 <Raspberry_DatPpars+0xfe>
 80013b6:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <Raspberry_DatPpars+0x108>)
 80013b8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80013bc:	eef1 7a67 	vneg.f32	s15, s15
 80013c0:	4b03      	ldr	r3, [pc, #12]	@ (80013d0 <Raspberry_DatPpars+0x108>)
 80013c2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
};
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	20000060 	.word	0x20000060
 80013d4:	42c80000 	.word	0x42c80000
 80013d8:	3dcccccd 	.word	0x3dcccccd

080013dc <Pin_SetLevl>:
    .Frequency = 0,
	.Functioning = 0
  }
};

void Pin_SetLevl(Bundle_Port_Pin *Pin, int State) {
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
//  HAL_GPIO_WritePin(Pin->Port, Pin->Pin, State);

  assert_param(IS_GPIO_PIN(Pin->Pin));
  assert_param(IS_GPIO_PIN_ACTION(State));

  if(State != GPIO_PIN_RESET) {Pin->Port->BSRR = Pin->Pin;}
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d005      	beq.n	80013f8 <Pin_SetLevl+0x1c>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	889a      	ldrh	r2, [r3, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	619a      	str	r2, [r3, #24]
  else {Pin->Port->BSRR = (uint32_t)Pin->Pin << 16U;};
};
 80013f6:	e006      	b.n	8001406 <Pin_SetLevl+0x2a>
  else {Pin->Port->BSRR = (uint32_t)Pin->Pin << 16U;};
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	889b      	ldrh	r3, [r3, #4]
 80013fc:	461a      	mov	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	0412      	lsls	r2, r2, #16
 8001404:	619a      	str	r2, [r3, #24]
};
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <Motor_DirRot>:

void Motor_DirRot(Motor *Motor_xx, GPIO_PinState Direction_of_rotation) {
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	460b      	mov	r3, r1
 800141c:	70fb      	strb	r3, [r7, #3]
//  HAL_GPIO_WritePin(Motor_xx->Setting.Pin.DIR.Port, Motor_xx->Setting.Pin.DIR.Pin, Direction_of_rotation);

  assert_param(IS_GPIO_PIN(Motor_xx->Setting.Pin.DIR.Pin));
  assert_param(IS_GPIO_PIN_ACTION(Direction_of_rotation));

  if(Direction_of_rotation != GPIO_PIN_RESET) {Motor_xx->Setting.Pin.DIR.Port->BSRR = Motor_xx->Setting.Pin.DIR.Pin;}
 800141e:	78fb      	ldrb	r3, [r7, #3]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <Motor_DirRot+0x1e>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	8a9a      	ldrh	r2, [r3, #20]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	619a      	str	r2, [r3, #24]
  else {Motor_xx->Setting.Pin.DIR.Port->BSRR = (uint32_t)Motor_xx->Setting.Pin.DIR.Pin << 16U;};
};
 800142e:	e006      	b.n	800143e <Motor_DirRot+0x2c>
  else {Motor_xx->Setting.Pin.DIR.Port->BSRR = (uint32_t)Motor_xx->Setting.Pin.DIR.Pin << 16U;};
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	8a9b      	ldrh	r3, [r3, #20]
 8001434:	461a      	mov	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	0412      	lsls	r2, r2, #16
 800143c:	619a      	str	r2, [r3, #24]
};
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <Motor_SetFrequency>:

void Motor_SetFrequency(Motor *Motor_xx, unsigned int frequency) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  TIM_HandleTypeDef *Number_xx = Motor_xx->Setting.Timer.Number;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800145a:	60bb      	str	r3, [r7, #8]

  static unsigned int prescaler = 0;
//  unsigned int period = (HAL_RCC_GetPCLK1Freq() * 2 / (frequency * (prescaler + 1))) - 1;
  unsigned int period = ((SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]) * 2 / (frequency * (prescaler + 1))) - 1;
 800145c:	4b28      	ldr	r3, [pc, #160]	@ (8001500 <Motor_SetFrequency+0xb4>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a28      	ldr	r2, [pc, #160]	@ (8001504 <Motor_SetFrequency+0xb8>)
 8001462:	6892      	ldr	r2, [r2, #8]
 8001464:	0a92      	lsrs	r2, r2, #10
 8001466:	f002 0207 	and.w	r2, r2, #7
 800146a:	4927      	ldr	r1, [pc, #156]	@ (8001508 <Motor_SetFrequency+0xbc>)
 800146c:	5c8a      	ldrb	r2, [r1, r2]
 800146e:	40d3      	lsrs	r3, r2
 8001470:	005a      	lsls	r2, r3, #1
 8001472:	4b26      	ldr	r3, [pc, #152]	@ (800150c <Motor_SetFrequency+0xc0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	3301      	adds	r3, #1
 8001478:	6839      	ldr	r1, [r7, #0]
 800147a:	fb01 f303 	mul.w	r3, r1, r3
 800147e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001482:	3b01      	subs	r3, #1
 8001484:	60fb      	str	r3, [r7, #12]

  while (period > 0xFFFF) {
 8001486:	e019      	b.n	80014bc <Motor_SetFrequency+0x70>
    prescaler++;
 8001488:	4b20      	ldr	r3, [pc, #128]	@ (800150c <Motor_SetFrequency+0xc0>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	3301      	adds	r3, #1
 800148e:	4a1f      	ldr	r2, [pc, #124]	@ (800150c <Motor_SetFrequency+0xc0>)
 8001490:	6013      	str	r3, [r2, #0]
    period = ((SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]) * 2 / (frequency * (prescaler + 1))) - 1;
 8001492:	4b1b      	ldr	r3, [pc, #108]	@ (8001500 <Motor_SetFrequency+0xb4>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a1b      	ldr	r2, [pc, #108]	@ (8001504 <Motor_SetFrequency+0xb8>)
 8001498:	6892      	ldr	r2, [r2, #8]
 800149a:	0a92      	lsrs	r2, r2, #10
 800149c:	f002 0207 	and.w	r2, r2, #7
 80014a0:	4919      	ldr	r1, [pc, #100]	@ (8001508 <Motor_SetFrequency+0xbc>)
 80014a2:	5c8a      	ldrb	r2, [r1, r2]
 80014a4:	40d3      	lsrs	r3, r2
 80014a6:	005a      	lsls	r2, r3, #1
 80014a8:	4b18      	ldr	r3, [pc, #96]	@ (800150c <Motor_SetFrequency+0xc0>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3301      	adds	r3, #1
 80014ae:	6839      	ldr	r1, [r7, #0]
 80014b0:	fb01 f303 	mul.w	r3, r1, r3
 80014b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b8:	3b01      	subs	r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
  while (period > 0xFFFF) {
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014c2:	d2e1      	bcs.n	8001488 <Motor_SetFrequency+0x3c>
  };

  HAL_TIM_PWM_Stop(Number_xx, Motor_xx->Setting.Timer.Channel);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c8:	4619      	mov	r1, r3
 80014ca:	68b8      	ldr	r0, [r7, #8]
 80014cc:	f002 f96e 	bl	80037ac <HAL_TIM_PWM_Stop>
  Number_xx->Instance->PSC = prescaler;
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a0d      	ldr	r2, [pc, #52]	@ (800150c <Motor_SetFrequency+0xc0>)
 80014d6:	6812      	ldr	r2, [r2, #0]
 80014d8:	629a      	str	r2, [r3, #40]	@ 0x28
  Number_xx->Instance->ARR = period;
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  Number_xx->Instance->CCR1 = Number_xx->Instance->ARR / 2;
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	0852      	lsrs	r2, r2, #1
 80014ee:	635a      	str	r2, [r3, #52]	@ 0x34

  Motor_xx->State.Frequency = frequency;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	62da      	str	r2, [r3, #44]	@ 0x2c
};
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000120 	.word	0x20000120
 8001504:	40023800 	.word	0x40023800
 8001508:	08005450 	.word	0x08005450
 800150c:	20000148 	.word	0x20000148

08001510 <Motor_UpFrequency>:

void Motor_UpFrequency(Motor *Motor_xx) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  if (Motor_xx->State.Frequency < Motor_xx->Setting.Frequency.Maximum_pulse) {
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	429a      	cmp	r2, r3
 8001522:	d215      	bcs.n	8001550 <Motor_UpFrequency+0x40>
    Motor_SetFrequency(
	  Motor_xx,
	  Motor_xx->State.Frequency + Motor_xx->Setting.Frequency.Step_up_the_pulse < Motor_xx->Setting.Frequency.Maximum_pulse ?
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	699a      	ldr	r2, [r3, #24]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	440b      	add	r3, r1
    Motor_SetFrequency(
 8001532:	4293      	cmp	r3, r2
 8001534:	bf28      	it	cs
 8001536:	4613      	movcs	r3, r2
 8001538:	4619      	mov	r1, r3
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff ff86 	bl	800144c <Motor_SetFrequency>
	    Motor_xx->State.Frequency + Motor_xx->Setting.Frequency.Step_up_the_pulse :
	    Motor_xx->Setting.Frequency.Maximum_pulse
	);
    HAL_TIM_PWM_Start(Motor_xx->Setting.Timer.Number, Motor_xx->Setting.Timer.Channel);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001548:	4619      	mov	r1, r3
 800154a:	4610      	mov	r0, r2
 800154c:	f002 f866 	bl	800361c <HAL_TIM_PWM_Start>
  };
};
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <Motor_Start>:

void Motor_Start(Motor *Motor_xx) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  Settings *Setting_xx = &Motor_xx->Setting;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	60fb      	str	r3, [r7, #12]

  Motor_SetFrequency(Motor_xx, Setting_xx->Frequency.Minimum_pulse);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	4619      	mov	r1, r3
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff ff6e 	bl	800144c <Motor_SetFrequency>
  HAL_TIM_PWM_Start(Setting_xx->Timer.Number, Setting_xx->Timer.Channel);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001578:	4619      	mov	r1, r3
 800157a:	4610      	mov	r0, r2
 800157c:	f002 f84e 	bl	800361c <HAL_TIM_PWM_Start>
//    tmpsmcr = Number_xx->Instance->SMCR & TIM_SMCR_SMS;
//    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr)) __HAL_TIM_ENABLE(Number_xx);
//  }
//  else __HAL_TIM_ENABLE(Number_xx);

  Pin_SetLevl(&Setting_xx->Pin.ENA, Low);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff29 	bl	80013dc <Pin_SetLevl>
  Motor_xx->State.Functioning = Hight;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
};
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <Motor_Stop>:
//  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) __HAL_TIM_MOE_DISABLE(htim); /* Disable the Main Output */
//  __HAL_TIM_DISABLE(htim); /* Disable the Peripheral */
//  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY); /* Set the TIM channel state */
//}

void Motor_Stop(Motor *Motor_xx) {
 800159a:	b580      	push	{r7, lr}
 800159c:	b084      	sub	sp, #16
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  Settings *Setting_xx = &Motor_xx->Setting;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	60fb      	str	r3, [r7, #12]

  Pin_SetLevl(&Setting_xx->Pin.ENA, Hight);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2101      	movs	r1, #1
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff ff16 	bl	80013dc <Pin_SetLevl>
  Motor_SetFrequency(Motor_xx, Setting_xx->Frequency.Minimum_pulse);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	4619      	mov	r1, r3
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ff48 	bl	800144c <Motor_SetFrequency>
  HAL_TIM_PWM_Stop(Setting_xx->Timer.Number, Setting_xx->Timer.Channel);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c4:	4619      	mov	r1, r3
 80015c6:	4610      	mov	r0, r2
 80015c8:	f002 f8f0 	bl	80037ac <HAL_TIM_PWM_Stop>
//  if (IS_TIM_BREAK_INSTANCE(Setting_xx->Timer.Number) != RESET)
//	  __HAL_TIM_MOE_DISABLE(Setting_xx->Timer.Number); /* Disable the Main Output */
//  __HAL_TIM_DISABLE(Setting_xx->Timer.Number); /* Disable the Peripheral */
//  TIM_CHANNEL_STATE_SET(Setting_xx->Timer.Number, Setting_xx->Timer.Channel, HAL_TIM_CHANNEL_STATE_READY); /* Set the TIM channel state */

  Motor_xx->State.Functioning = Low;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
};
 80015d4:	bf00      	nop
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <System_CheckLimit>:
    .Maximum = 90.0f,
    .Minimum = -20.0f
  }
};

char System_CheckLimit(Systems *Systema_xx, float Incremtnt_limit) {
 80015dc:	b480      	push	{r7}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	ed87 0a00 	vstr	s0, [r7]
  float lower_limit = Systema_xx->Config_angular.Minimum + Incremtnt_limit;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80015ee:	ed97 7a00 	vldr	s14, [r7]
 80015f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f6:	edc7 7a05 	vstr	s15, [r7, #20]
  float upper_limit = Systema_xx->Config_angular.Maximum - Incremtnt_limit;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	ed93 7a00 	vldr	s14, [r3]
 8001600:	edd7 7a00 	vldr	s15, [r7]
 8001604:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001608:	edc7 7a04 	vstr	s15, [r7, #16]
  float current_angle = CLAMP(Systema_xx->Actual_angular, lower_limit, upper_limit);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001612:	ed97 7a04 	vldr	s14, [r7, #16]
 8001616:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800161a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161e:	dd03      	ble.n	8001628 <System_CheckLimit+0x4c>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	edd3 7a02 	vldr	s15, [r3, #8]
 8001626:	e001      	b.n	800162c <System_CheckLimit+0x50>
 8001628:	edd7 7a04 	vldr	s15, [r7, #16]
 800162c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001630:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001638:	d501      	bpl.n	800163e <System_CheckLimit+0x62>
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	e00d      	b.n	800165a <System_CheckLimit+0x7e>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	edd3 7a02 	vldr	s15, [r3, #8]
 8001644:	ed97 7a04 	vldr	s14, [r7, #16]
 8001648:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800164c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001650:	dd02      	ble.n	8001658 <System_CheckLimit+0x7c>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	e000      	b.n	800165a <System_CheckLimit+0x7e>
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	60fb      	str	r3, [r7, #12]
  return ((current_angle != lower_limit) && (current_angle != upper_limit)) ? 1 : 0;
 800165c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001660:	edd7 7a05 	vldr	s15, [r7, #20]
 8001664:	eeb4 7a67 	vcmp.f32	s14, s15
 8001668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166c:	d00a      	beq.n	8001684 <System_CheckLimit+0xa8>
 800166e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001672:	edd7 7a04 	vldr	s15, [r7, #16]
 8001676:	eeb4 7a67 	vcmp.f32	s14, s15
 800167a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167e:	d001      	beq.n	8001684 <System_CheckLimit+0xa8>
 8001680:	2301      	movs	r3, #1
 8001682:	e000      	b.n	8001686 <System_CheckLimit+0xaa>
 8001684:	2300      	movs	r3, #0
 8001686:	b2db      	uxtb	r3, r3
};
 8001688:	4618      	mov	r0, r3
 800168a:	371c      	adds	r7, #28
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  Motor_AZ.Setting.Timer.Number = &htim3;
 8001698:	4b80      	ldr	r3, [pc, #512]	@ (800189c <main+0x208>)
 800169a:	4a81      	ldr	r2, [pc, #516]	@ (80018a0 <main+0x20c>)
 800169c:	625a      	str	r2, [r3, #36]	@ 0x24
  Motor_AZ.Setting.Timer.Channel = TIM_CHANNEL_1;
 800169e:	4b7f      	ldr	r3, [pc, #508]	@ (800189c <main+0x208>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	629a      	str	r2, [r3, #40]	@ 0x28
  Motor_EL.Setting.Timer.Number = &htim2;
 80016a4:	4b7f      	ldr	r3, [pc, #508]	@ (80018a4 <main+0x210>)
 80016a6:	4a80      	ldr	r2, [pc, #512]	@ (80018a8 <main+0x214>)
 80016a8:	625a      	str	r2, [r3, #36]	@ 0x24
  Motor_EL.Setting.Timer.Channel = TIM_CHANNEL_1;
 80016aa:	4b7e      	ldr	r3, [pc, #504]	@ (80018a4 <main+0x210>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	629a      	str	r2, [r3, #40]	@ 0x28

  Encoder_AZ.Timer = &htim8;
 80016b0:	4b7e      	ldr	r3, [pc, #504]	@ (80018ac <main+0x218>)
 80016b2:	4a7f      	ldr	r2, [pc, #508]	@ (80018b0 <main+0x21c>)
 80016b4:	611a      	str	r2, [r3, #16]
  Encoder_EL.Timer = &htim4;
 80016b6:	4b7f      	ldr	r3, [pc, #508]	@ (80018b4 <main+0x220>)
 80016b8:	4a7f      	ldr	r2, [pc, #508]	@ (80018b8 <main+0x224>)
 80016ba:	611a      	str	r2, [r3, #16]

  RP_message.Chanal = &huart2;
 80016bc:	4b7f      	ldr	r3, [pc, #508]	@ (80018bc <main+0x228>)
 80016be:	4a80      	ldr	r2, [pc, #512]	@ (80018c0 <main+0x22c>)
 80016c0:	601a      	str	r2, [r3, #0]
  Size_Rx_UART = sizeof(RP_message.Rx_data);
 80016c2:	4b80      	ldr	r3, [pc, #512]	@ (80018c4 <main+0x230>)
 80016c4:	2215      	movs	r2, #21
 80016c6:	601a      	str	r2, [r3, #0]
  Size_Tx_UART = sizeof(RP_message.Tx_data);
 80016c8:	4b7f      	ldr	r3, [pc, #508]	@ (80018c8 <main+0x234>)
 80016ca:	220d      	movs	r2, #13
 80016cc:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ce:	f000 fecd 	bl	800246c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016d2:	f000 f90d 	bl	80018f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016d6:	f000 fb8b 	bl	8001df0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80016da:	f000 f973 	bl	80019c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80016de:	f000 f9c9 	bl	8001a74 <MX_TIM3_Init>
  MX_TIM4_Init();
 80016e2:	f000 fa21 	bl	8001b28 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80016e6:	f000 fb59 	bl	8001d9c <MX_USART2_UART_Init>
  MX_TIM8_Init();
 80016ea:	f000 fae9 	bl	8001cc0 <MX_TIM8_Init>
  MX_TIM5_Init();
 80016ee:	f000 fa87 	bl	8001c00 <MX_TIM5_Init>

  Encoder_Init(&Encoder_AZ);
 80016f2:	486e      	ldr	r0, [pc, #440]	@ (80018ac <main+0x218>)
 80016f4:	f7ff fb1c 	bl	8000d30 <Encoder_Init>
  Encoder_Init(&Encoder_EL);
 80016f8:	486e      	ldr	r0, [pc, #440]	@ (80018b4 <main+0x220>)
 80016fa:	f7ff fb19 	bl	8000d30 <Encoder_Init>

  Motor_AZ.State.Old_value_tik = htim5.Instance->CNT;
 80016fe:	4b73      	ldr	r3, [pc, #460]	@ (80018cc <main+0x238>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001704:	4a65      	ldr	r2, [pc, #404]	@ (800189c <main+0x208>)
 8001706:	6353      	str	r3, [r2, #52]	@ 0x34
  Motor_EL.State.Old_value_tik = htim5.Instance->CNT;
 8001708:	4b70      	ldr	r3, [pc, #448]	@ (80018cc <main+0x238>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170e:	4a65      	ldr	r2, [pc, #404]	@ (80018a4 <main+0x210>)
 8001710:	6353      	str	r3, [r2, #52]	@ 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	Encoder_GetAngular(&Encoder_AZ);
 8001712:	4866      	ldr	r0, [pc, #408]	@ (80018ac <main+0x218>)
 8001714:	f7ff fb52 	bl	8000dbc <Encoder_GetAngular>
    Encoder_GetAngular(&Encoder_EL);
 8001718:	4866      	ldr	r0, [pc, #408]	@ (80018b4 <main+0x220>)
 800171a:	f7ff fb4f 	bl	8000dbc <Encoder_GetAngular>

	if (System_CheckLimit(&Systema_AZ, 10.0f) && System_CheckLimit(&Systema_EL, 5.0f)) {
 800171e:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8001722:	486b      	ldr	r0, [pc, #428]	@ (80018d0 <main+0x23c>)
 8001724:	f7ff ff5a 	bl	80015dc <System_CheckLimit>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d028      	beq.n	8001780 <main+0xec>
 800172e:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8001732:	4868      	ldr	r0, [pc, #416]	@ (80018d4 <main+0x240>)
 8001734:	f7ff ff52 	bl	80015dc <System_CheckLimit>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d020      	beq.n	8001780 <main+0xec>
	  switch (RP_message.Rx_data[15]) {
 800173e:	4b5f      	ldr	r3, [pc, #380]	@ (80018bc <main+0x228>)
 8001740:	7d1b      	ldrb	r3, [r3, #20]
 8001742:	2b32      	cmp	r3, #50	@ 0x32
 8001744:	d014      	beq.n	8001770 <main+0xdc>
 8001746:	2b32      	cmp	r3, #50	@ 0x32
 8001748:	dc2a      	bgt.n	80017a0 <main+0x10c>
 800174a:	2b30      	cmp	r3, #48	@ 0x30
 800174c:	d002      	beq.n	8001754 <main+0xc0>
 800174e:	2b31      	cmp	r3, #49	@ 0x31
 8001750:	d007      	beq.n	8001762 <main+0xce>
 8001752:	e025      	b.n	80017a0 <main+0x10c>
	    case '0':
	      Mode_Manual(&Motor_AZ);
 8001754:	4851      	ldr	r0, [pc, #324]	@ (800189c <main+0x208>)
 8001756:	f7ff fb8b 	bl	8000e70 <Mode_Manual>
	      Mode_Manual(&Motor_EL);
 800175a:	4852      	ldr	r0, [pc, #328]	@ (80018a4 <main+0x210>)
 800175c:	f7ff fb88 	bl	8000e70 <Mode_Manual>
		  break;
 8001760:	e00d      	b.n	800177e <main+0xea>
	    case '1':
	      Mode_Semi_automatic(&Motor_AZ);
 8001762:	484e      	ldr	r0, [pc, #312]	@ (800189c <main+0x208>)
 8001764:	f7ff fbf6 	bl	8000f54 <Mode_Semi_automatic>
	      Mode_Semi_automatic(&Motor_EL);
 8001768:	484e      	ldr	r0, [pc, #312]	@ (80018a4 <main+0x210>)
 800176a:	f7ff fbf3 	bl	8000f54 <Mode_Semi_automatic>
	      break;
 800176e:	e006      	b.n	800177e <main+0xea>
	    case '2':
	      Mode_Automatic(&Motor_AZ);
 8001770:	484a      	ldr	r0, [pc, #296]	@ (800189c <main+0x208>)
 8001772:	f7ff fcc5 	bl	8001100 <Mode_Automatic>
	      Mode_Automatic(&Motor_EL);
 8001776:	484b      	ldr	r0, [pc, #300]	@ (80018a4 <main+0x210>)
 8001778:	f7ff fcc2 	bl	8001100 <Mode_Automatic>
	      break;
 800177c:	bf00      	nop
	  switch (RP_message.Rx_data[15]) {
 800177e:	e00f      	b.n	80017a0 <main+0x10c>
	  };
	} else {
	  Motor_Stop(&Motor_AZ);
 8001780:	4846      	ldr	r0, [pc, #280]	@ (800189c <main+0x208>)
 8001782:	f7ff ff0a 	bl	800159a <Motor_Stop>
	  Motor_Stop(&Motor_EL);
 8001786:	4847      	ldr	r0, [pc, #284]	@ (80018a4 <main+0x210>)
 8001788:	f7ff ff07 	bl	800159a <Motor_Stop>

	  Mode_Moving_away_from_borders(&Motor_AZ, 11.0f);
 800178c:	eeb2 0a06 	vmov.f32	s0, #38	@ 0x41300000  11.0
 8001790:	4842      	ldr	r0, [pc, #264]	@ (800189c <main+0x208>)
 8001792:	f7ff fc6b 	bl	800106c <Mode_Moving_away_from_borders>
	  Mode_Moving_away_from_borders(&Motor_EL, 20.0f);
 8001796:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 800179a:	4842      	ldr	r0, [pc, #264]	@ (80018a4 <main+0x210>)
 800179c:	f7ff fc66 	bl	800106c <Mode_Moving_away_from_borders>
	};
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	Frequency_AZ = Motor_AZ.State.Frequency;
 80017a0:	4b3e      	ldr	r3, [pc, #248]	@ (800189c <main+0x208>)
 80017a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a4:	4a4c      	ldr	r2, [pc, #304]	@ (80018d8 <main+0x244>)
 80017a6:	6013      	str	r3, [r2, #0]
	Frequency_EL = Motor_EL.State.Frequency;
 80017a8:	4b3e      	ldr	r3, [pc, #248]	@ (80018a4 <main+0x210>)
 80017aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ac:	4a4b      	ldr	r2, [pc, #300]	@ (80018dc <main+0x248>)
 80017ae:	6013      	str	r3, [r2, #0]
	Angular_AZ = Systema_AZ.Actual_angular;
 80017b0:	4b47      	ldr	r3, [pc, #284]	@ (80018d0 <main+0x23c>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	4a4a      	ldr	r2, [pc, #296]	@ (80018e0 <main+0x24c>)
 80017b6:	6013      	str	r3, [r2, #0]
	Angular_EL = Systema_EL.Actual_angular;
 80017b8:	4b46      	ldr	r3, [pc, #280]	@ (80018d4 <main+0x240>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	4a49      	ldr	r2, [pc, #292]	@ (80018e4 <main+0x250>)
 80017be:	6013      	str	r3, [r2, #0]
	Error_AZ = abs(RP_message.Azimuth - Systema_AZ.Actual_angular);
 80017c0:	4b3e      	ldr	r3, [pc, #248]	@ (80018bc <main+0x228>)
 80017c2:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80017c6:	4b42      	ldr	r3, [pc, #264]	@ (80018d0 <main+0x23c>)
 80017c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80017cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017d4:	ee17 3a90 	vmov	r3, s15
 80017d8:	2b00      	cmp	r3, #0
 80017da:	bfb8      	it	lt
 80017dc:	425b      	neglt	r3, r3
 80017de:	ee07 3a90 	vmov	s15, r3
 80017e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017e6:	4b40      	ldr	r3, [pc, #256]	@ (80018e8 <main+0x254>)
 80017e8:	edc3 7a00 	vstr	s15, [r3]
	Error_EL = abs(RP_message.Elevation - Systema_EL.Actual_angular);
 80017ec:	4b33      	ldr	r3, [pc, #204]	@ (80018bc <main+0x228>)
 80017ee:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80017f2:	4b38      	ldr	r3, [pc, #224]	@ (80018d4 <main+0x240>)
 80017f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80017f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001800:	ee17 3a90 	vmov	r3, s15
 8001804:	2b00      	cmp	r3, #0
 8001806:	bfb8      	it	lt
 8001808:	425b      	neglt	r3, r3
 800180a:	ee07 3a90 	vmov	s15, r3
 800180e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001812:	4b36      	ldr	r3, [pc, #216]	@ (80018ec <main+0x258>)
 8001814:	edc3 7a00 	vstr	s15, [r3]

	RP_message.Rx_data[0] = 'A';  RP_message.Rx_data[1] = 'z';
 8001818:	4b28      	ldr	r3, [pc, #160]	@ (80018bc <main+0x228>)
 800181a:	2241      	movs	r2, #65	@ 0x41
 800181c:	715a      	strb	r2, [r3, #5]
 800181e:	4b27      	ldr	r3, [pc, #156]	@ (80018bc <main+0x228>)
 8001820:	227a      	movs	r2, #122	@ 0x7a
 8001822:	719a      	strb	r2, [r3, #6]
	RP_message.Rx_data[2] = '+'; RP_message.Rx_data[3] = '0'; RP_message.Rx_data[4] = '0'; RP_message.Rx_data[5] = '5'; /*,*/ RP_message.Rx_data[6] = '0';
 8001824:	4b25      	ldr	r3, [pc, #148]	@ (80018bc <main+0x228>)
 8001826:	222b      	movs	r2, #43	@ 0x2b
 8001828:	71da      	strb	r2, [r3, #7]
 800182a:	4b24      	ldr	r3, [pc, #144]	@ (80018bc <main+0x228>)
 800182c:	2230      	movs	r2, #48	@ 0x30
 800182e:	721a      	strb	r2, [r3, #8]
 8001830:	4b22      	ldr	r3, [pc, #136]	@ (80018bc <main+0x228>)
 8001832:	2230      	movs	r2, #48	@ 0x30
 8001834:	725a      	strb	r2, [r3, #9]
 8001836:	4b21      	ldr	r3, [pc, #132]	@ (80018bc <main+0x228>)
 8001838:	2235      	movs	r2, #53	@ 0x35
 800183a:	729a      	strb	r2, [r3, #10]
 800183c:	4b1f      	ldr	r3, [pc, #124]	@ (80018bc <main+0x228>)
 800183e:	2230      	movs	r2, #48	@ 0x30
 8001840:	72da      	strb	r2, [r3, #11]

	RP_message.Rx_data[7] = 'E';  RP_message.Rx_data[8] = 'l';
 8001842:	4b1e      	ldr	r3, [pc, #120]	@ (80018bc <main+0x228>)
 8001844:	2245      	movs	r2, #69	@ 0x45
 8001846:	731a      	strb	r2, [r3, #12]
 8001848:	4b1c      	ldr	r3, [pc, #112]	@ (80018bc <main+0x228>)
 800184a:	226c      	movs	r2, #108	@ 0x6c
 800184c:	735a      	strb	r2, [r3, #13]
	RP_message.Rx_data[9] = '-'; RP_message.Rx_data[10] = '0'; RP_message.Rx_data[11] = '0'; RP_message.Rx_data[12] = '5'; /*,*/ RP_message.Rx_data[13] = '0';
 800184e:	4b1b      	ldr	r3, [pc, #108]	@ (80018bc <main+0x228>)
 8001850:	222d      	movs	r2, #45	@ 0x2d
 8001852:	739a      	strb	r2, [r3, #14]
 8001854:	4b19      	ldr	r3, [pc, #100]	@ (80018bc <main+0x228>)
 8001856:	2230      	movs	r2, #48	@ 0x30
 8001858:	73da      	strb	r2, [r3, #15]
 800185a:	4b18      	ldr	r3, [pc, #96]	@ (80018bc <main+0x228>)
 800185c:	2230      	movs	r2, #48	@ 0x30
 800185e:	741a      	strb	r2, [r3, #16]
 8001860:	4b16      	ldr	r3, [pc, #88]	@ (80018bc <main+0x228>)
 8001862:	2235      	movs	r2, #53	@ 0x35
 8001864:	745a      	strb	r2, [r3, #17]
 8001866:	4b15      	ldr	r3, [pc, #84]	@ (80018bc <main+0x228>)
 8001868:	2230      	movs	r2, #48	@ 0x30
 800186a:	749a      	strb	r2, [r3, #18]

	RP_message.Rx_data[14] = 'M';
 800186c:	4b13      	ldr	r3, [pc, #76]	@ (80018bc <main+0x228>)
 800186e:	224d      	movs	r2, #77	@ 0x4d
 8001870:	74da      	strb	r2, [r3, #19]
	RP_message.Rx_data[15] = '0';
 8001872:	4b12      	ldr	r3, [pc, #72]	@ (80018bc <main+0x228>)
 8001874:	2230      	movs	r2, #48	@ 0x30
 8001876:	751a      	strb	r2, [r3, #20]

	RP_message.Rx_data[16] = 'F';
 8001878:	4b10      	ldr	r3, [pc, #64]	@ (80018bc <main+0x228>)
 800187a:	2246      	movs	r2, #70	@ 0x46
 800187c:	755a      	strb	r2, [r3, #21]
	RP_message.Rx_data[17] = '0';
 800187e:	4b0f      	ldr	r3, [pc, #60]	@ (80018bc <main+0x228>)
 8001880:	2230      	movs	r2, #48	@ 0x30
 8001882:	759a      	strb	r2, [r3, #22]

	RP_message.Rx_data[18] = '\r'; RP_message.Rx_data[19] = '\n'; RP_message.Rx_data[20] = '\0';
 8001884:	4b0d      	ldr	r3, [pc, #52]	@ (80018bc <main+0x228>)
 8001886:	220d      	movs	r2, #13
 8001888:	75da      	strb	r2, [r3, #23]
 800188a:	4b0c      	ldr	r3, [pc, #48]	@ (80018bc <main+0x228>)
 800188c:	220a      	movs	r2, #10
 800188e:	761a      	strb	r2, [r3, #24]
 8001890:	4b0a      	ldr	r3, [pc, #40]	@ (80018bc <main+0x228>)
 8001892:	2200      	movs	r2, #0
 8001894:	765a      	strb	r2, [r3, #25]
	Raspberry_DatPpars();
 8001896:	f7ff fd17 	bl	80012c8 <Raspberry_DatPpars>
	Encoder_GetAngular(&Encoder_AZ);
 800189a:	e73a      	b.n	8001712 <main+0x7e>
 800189c:	20000090 	.word	0x20000090
 80018a0:	20000194 	.word	0x20000194
 80018a4:	200000cc 	.word	0x200000cc
 80018a8:	2000014c 	.word	0x2000014c
 80018ac:	20000000 	.word	0x20000000
 80018b0:	2000026c 	.word	0x2000026c
 80018b4:	2000001c 	.word	0x2000001c
 80018b8:	200001dc 	.word	0x200001dc
 80018bc:	20000060 	.word	0x20000060
 80018c0:	200002b4 	.word	0x200002b4
 80018c4:	200002fc 	.word	0x200002fc
 80018c8:	20000300 	.word	0x20000300
 80018cc:	20000224 	.word	0x20000224
 80018d0:	20000108 	.word	0x20000108
 80018d4:	20000114 	.word	0x20000114
 80018d8:	20000304 	.word	0x20000304
 80018dc:	20000308 	.word	0x20000308
 80018e0:	2000030c 	.word	0x2000030c
 80018e4:	20000310 	.word	0x20000310
 80018e8:	20000314 	.word	0x20000314
 80018ec:	20000318 	.word	0x20000318

080018f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b094      	sub	sp, #80	@ 0x50
 80018f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018f6:	f107 0320 	add.w	r3, r7, #32
 80018fa:	2230      	movs	r2, #48	@ 0x30
 80018fc:	2100      	movs	r1, #0
 80018fe:	4618      	mov	r0, r3
 8001900:	f003 fd66 	bl	80053d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001904:	f107 030c 	add.w	r3, r7, #12
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001914:	2300      	movs	r3, #0
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	4b28      	ldr	r3, [pc, #160]	@ (80019bc <SystemClock_Config+0xcc>)
 800191a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191c:	4a27      	ldr	r2, [pc, #156]	@ (80019bc <SystemClock_Config+0xcc>)
 800191e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001922:	6413      	str	r3, [r2, #64]	@ 0x40
 8001924:	4b25      	ldr	r3, [pc, #148]	@ (80019bc <SystemClock_Config+0xcc>)
 8001926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001930:	2300      	movs	r3, #0
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	4b22      	ldr	r3, [pc, #136]	@ (80019c0 <SystemClock_Config+0xd0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a21      	ldr	r2, [pc, #132]	@ (80019c0 <SystemClock_Config+0xd0>)
 800193a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	4b1f      	ldr	r3, [pc, #124]	@ (80019c0 <SystemClock_Config+0xd0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800194c:	2301      	movs	r3, #1
 800194e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001950:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001954:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001956:	2302      	movs	r3, #2
 8001958:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800195a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800195e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001960:	2308      	movs	r3, #8
 8001962:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001964:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001968:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800196a:	2302      	movs	r3, #2
 800196c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800196e:	2304      	movs	r3, #4
 8001970:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001972:	f107 0320 	add.w	r3, r7, #32
 8001976:	4618      	mov	r0, r3
 8001978:	f001 f968 	bl	8002c4c <HAL_RCC_OscConfig>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001982:	f000 faf3 	bl	8001f6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001986:	230f      	movs	r3, #15
 8001988:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800198a:	2302      	movs	r3, #2
 800198c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001992:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001996:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001998:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800199c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800199e:	f107 030c 	add.w	r3, r7, #12
 80019a2:	2105      	movs	r1, #5
 80019a4:	4618      	mov	r0, r3
 80019a6:	f001 fbc9 	bl	800313c <HAL_RCC_ClockConfig>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80019b0:	f000 fadc 	bl	8001f6c <Error_Handler>
  }
}
 80019b4:	bf00      	nop
 80019b6:	3750      	adds	r7, #80	@ 0x50
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40007000 	.word	0x40007000

080019c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08a      	sub	sp, #40	@ 0x28
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ca:	f107 0320 	add.w	r3, r7, #32
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
 80019e0:	611a      	str	r2, [r3, #16]
 80019e2:	615a      	str	r2, [r3, #20]
 80019e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019e6:	4b22      	ldr	r3, [pc, #136]	@ (8001a70 <MX_TIM2_Init+0xac>)
 80019e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019ee:	4b20      	ldr	r3, [pc, #128]	@ (8001a70 <MX_TIM2_Init+0xac>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a70 <MX_TIM2_Init+0xac>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80019fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001a70 <MX_TIM2_Init+0xac>)
 80019fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001a00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a02:	4b1b      	ldr	r3, [pc, #108]	@ (8001a70 <MX_TIM2_Init+0xac>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a08:	4b19      	ldr	r3, [pc, #100]	@ (8001a70 <MX_TIM2_Init+0xac>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a0e:	4818      	ldr	r0, [pc, #96]	@ (8001a70 <MX_TIM2_Init+0xac>)
 8001a10:	f001 fdb4 	bl	800357c <HAL_TIM_PWM_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001a1a:	f000 faa7 	bl	8001f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a26:	f107 0320 	add.w	r3, r7, #32
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4810      	ldr	r0, [pc, #64]	@ (8001a70 <MX_TIM2_Init+0xac>)
 8001a2e:	f002 fcc1 	bl	80043b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001a38:	f000 fa98 	bl	8001f6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a3c:	2360      	movs	r3, #96	@ 0x60
 8001a3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	2200      	movs	r2, #0
 8001a50:	4619      	mov	r1, r3
 8001a52:	4807      	ldr	r0, [pc, #28]	@ (8001a70 <MX_TIM2_Init+0xac>)
 8001a54:	f002 f93e 	bl	8003cd4 <HAL_TIM_PWM_ConfigChannel>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001a5e:	f000 fa85 	bl	8001f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a62:	4803      	ldr	r0, [pc, #12]	@ (8001a70 <MX_TIM2_Init+0xac>)
 8001a64:	f000 fbae 	bl	80021c4 <HAL_TIM_MspPostInit>

}
 8001a68:	bf00      	nop
 8001a6a:	3728      	adds	r7, #40	@ 0x28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	2000014c 	.word	0x2000014c

08001a74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	@ 0x28
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7a:	f107 0320 	add.w	r3, r7, #32
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
 8001a90:	611a      	str	r2, [r3, #16]
 8001a92:	615a      	str	r2, [r3, #20]
 8001a94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a96:	4b22      	ldr	r3, [pc, #136]	@ (8001b20 <MX_TIM3_Init+0xac>)
 8001a98:	4a22      	ldr	r2, [pc, #136]	@ (8001b24 <MX_TIM3_Init+0xb0>)
 8001a9a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a9c:	4b20      	ldr	r3, [pc, #128]	@ (8001b20 <MX_TIM3_Init+0xac>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b20 <MX_TIM3_Init+0xac>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b20 <MX_TIM3_Init+0xac>)
 8001aaa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001aae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b20 <MX_TIM3_Init+0xac>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b20 <MX_TIM3_Init+0xac>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001abc:	4818      	ldr	r0, [pc, #96]	@ (8001b20 <MX_TIM3_Init+0xac>)
 8001abe:	f001 fd5d 	bl	800357c <HAL_TIM_PWM_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001ac8:	f000 fa50 	bl	8001f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001acc:	2300      	movs	r3, #0
 8001ace:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ad4:	f107 0320 	add.w	r3, r7, #32
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4811      	ldr	r0, [pc, #68]	@ (8001b20 <MX_TIM3_Init+0xac>)
 8001adc:	f002 fc6a 	bl	80043b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001ae6:	f000 fa41 	bl	8001f6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aea:	2360      	movs	r3, #96	@ 0x60
 8001aec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	2200      	movs	r2, #0
 8001afe:	4619      	mov	r1, r3
 8001b00:	4807      	ldr	r0, [pc, #28]	@ (8001b20 <MX_TIM3_Init+0xac>)
 8001b02:	f002 f8e7 	bl	8003cd4 <HAL_TIM_PWM_ConfigChannel>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001b0c:	f000 fa2e 	bl	8001f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b10:	4803      	ldr	r0, [pc, #12]	@ (8001b20 <MX_TIM3_Init+0xac>)
 8001b12:	f000 fb57 	bl	80021c4 <HAL_TIM_MspPostInit>

}
 8001b16:	bf00      	nop
 8001b18:	3728      	adds	r7, #40	@ 0x28
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000194 	.word	0x20000194
 8001b24:	40000400 	.word	0x40000400

08001b28 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08c      	sub	sp, #48	@ 0x30
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b2e:	f107 030c 	add.w	r3, r7, #12
 8001b32:	2224      	movs	r2, #36	@ 0x24
 8001b34:	2100      	movs	r1, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f003 fc4a 	bl	80053d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b3c:	1d3b      	adds	r3, r7, #4
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b44:	4b2b      	ldr	r3, [pc, #172]	@ (8001bf4 <MX_TIM4_Init+0xcc>)
 8001b46:	4a2c      	ldr	r2, [pc, #176]	@ (8001bf8 <MX_TIM4_Init+0xd0>)
 8001b48:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf4 <MX_TIM4_Init+0xcc>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b50:	4b28      	ldr	r3, [pc, #160]	@ (8001bf4 <MX_TIM4_Init+0xcc>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2440;
 8001b56:	4b27      	ldr	r3, [pc, #156]	@ (8001bf4 <MX_TIM4_Init+0xcc>)
 8001b58:	f640 1288 	movw	r2, #2440	@ 0x988
 8001b5c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5e:	4b25      	ldr	r3, [pc, #148]	@ (8001bf4 <MX_TIM4_Init+0xcc>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b64:	4b23      	ldr	r3, [pc, #140]	@ (8001bf4 <MX_TIM4_Init+0xcc>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b72:	2301      	movs	r3, #1
 8001b74:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001b7a:	230f      	movs	r3, #15
 8001b7c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b82:	2301      	movs	r3, #1
 8001b84:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b86:	2300      	movs	r3, #0
 8001b88:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001b8a:	230f      	movs	r3, #15
 8001b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001b8e:	f107 030c 	add.w	r3, r7, #12
 8001b92:	4619      	mov	r1, r3
 8001b94:	4817      	ldr	r0, [pc, #92]	@ (8001bf4 <MX_TIM4_Init+0xcc>)
 8001b96:	f001 fe79 	bl	800388c <HAL_TIM_Encoder_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001ba0:	f000 f9e4 	bl	8001f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bac:	1d3b      	adds	r3, r7, #4
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4810      	ldr	r0, [pc, #64]	@ (8001bf4 <MX_TIM4_Init+0xcc>)
 8001bb2:	f002 fbff 	bl	80043b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001bbc:	f000 f9d6 	bl	8001f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  htim4.Init.Period = Encoder_EL.Puls.Pulses_per_revolution * 4;
 8001bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bfc <MX_TIM4_Init+0xd4>)
 8001bc2:	8a9b      	ldrh	r3, [r3, #20]
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf4 <MX_TIM4_Init+0xcc>)
 8001bca:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {Error_Handler();}
 8001bcc:	f107 030c 	add.w	r3, r7, #12
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4808      	ldr	r0, [pc, #32]	@ (8001bf4 <MX_TIM4_Init+0xcc>)
 8001bd4:	f001 fe5a 	bl	800388c <HAL_TIM_Encoder_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM4_Init+0xba>
 8001bde:	f000 f9c5 	bl	8001f6c <Error_Handler>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001be2:	213c      	movs	r1, #60	@ 0x3c
 8001be4:	4803      	ldr	r0, [pc, #12]	@ (8001bf4 <MX_TIM4_Init+0xcc>)
 8001be6:	f001 fef7 	bl	80039d8 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM4_Init 2 */

}
 8001bea:	bf00      	nop
 8001bec:	3730      	adds	r7, #48	@ 0x30
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200001dc 	.word	0x200001dc
 8001bf8:	40000800 	.word	0x40000800
 8001bfc:	2000001c 	.word	0x2000001c

08001c00 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08a      	sub	sp, #40	@ 0x28
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c06:	f107 0320 	add.w	r3, r7, #32
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	609a      	str	r2, [r3, #8]
 8001c1a:	60da      	str	r2, [r3, #12]
 8001c1c:	611a      	str	r2, [r3, #16]
 8001c1e:	615a      	str	r2, [r3, #20]
 8001c20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c22:	4b24      	ldr	r3, [pc, #144]	@ (8001cb4 <MX_TIM5_Init+0xb4>)
 8001c24:	4a24      	ldr	r2, [pc, #144]	@ (8001cb8 <MX_TIM5_Init+0xb8>)
 8001c26:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100;
 8001c28:	4b22      	ldr	r3, [pc, #136]	@ (8001cb4 <MX_TIM5_Init+0xb4>)
 8001c2a:	2264      	movs	r2, #100	@ 0x64
 8001c2c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2e:	4b21      	ldr	r3, [pc, #132]	@ (8001cb4 <MX_TIM5_Init+0xb4>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001c34:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb4 <MX_TIM5_Init+0xb4>)
 8001c36:	f04f 32ff 	mov.w	r2, #4294967295
 8001c3a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb4 <MX_TIM5_Init+0xb4>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c42:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb4 <MX_TIM5_Init+0xb4>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001c48:	481a      	ldr	r0, [pc, #104]	@ (8001cb4 <MX_TIM5_Init+0xb4>)
 8001c4a:	f001 fc97 	bl	800357c <HAL_TIM_PWM_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001c54:	f000 f98a 	bl	8001f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c60:	f107 0320 	add.w	r3, r7, #32
 8001c64:	4619      	mov	r1, r3
 8001c66:	4813      	ldr	r0, [pc, #76]	@ (8001cb4 <MX_TIM5_Init+0xb4>)
 8001c68:	f002 fba4 	bl	80043b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001c72:	f000 f97b 	bl	8001f6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c76:	2360      	movs	r3, #96	@ 0x60
 8001c78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2152533152;
 8001c7a:	4b10      	ldr	r3, [pc, #64]	@ (8001cbc <MX_TIM5_Init+0xbc>)
 8001c7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c86:	1d3b      	adds	r3, r7, #4
 8001c88:	2200      	movs	r2, #0
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4809      	ldr	r0, [pc, #36]	@ (8001cb4 <MX_TIM5_Init+0xb4>)
 8001c8e:	f002 f821 	bl	8003cd4 <HAL_TIM_PWM_ConfigChannel>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001c98:	f000 f968 	bl	8001f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4805      	ldr	r0, [pc, #20]	@ (8001cb4 <MX_TIM5_Init+0xb4>)
 8001ca0:	f001 fcbc 	bl	800361c <HAL_TIM_PWM_Start>
  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001ca4:	4803      	ldr	r0, [pc, #12]	@ (8001cb4 <MX_TIM5_Init+0xb4>)
 8001ca6:	f000 fa8d 	bl	80021c4 <HAL_TIM_MspPostInit>

}
 8001caa:	bf00      	nop
 8001cac:	3728      	adds	r7, #40	@ 0x28
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000224 	.word	0x20000224
 8001cb8:	40000c00 	.word	0x40000c00
 8001cbc:	804d0ca0 	.word	0x804d0ca0

08001cc0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08c      	sub	sp, #48	@ 0x30
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cc6:	f107 030c 	add.w	r3, r7, #12
 8001cca:	2224      	movs	r2, #36	@ 0x24
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f003 fb7e 	bl	80053d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001cdc:	4b2c      	ldr	r3, [pc, #176]	@ (8001d90 <MX_TIM8_Init+0xd0>)
 8001cde:	4a2d      	ldr	r2, [pc, #180]	@ (8001d94 <MX_TIM8_Init+0xd4>)
 8001ce0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001ce2:	4b2b      	ldr	r3, [pc, #172]	@ (8001d90 <MX_TIM8_Init+0xd0>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce8:	4b29      	ldr	r3, [pc, #164]	@ (8001d90 <MX_TIM8_Init+0xd0>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001cee:	4b28      	ldr	r3, [pc, #160]	@ (8001d90 <MX_TIM8_Init+0xd0>)
 8001cf0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cf4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf6:	4b26      	ldr	r3, [pc, #152]	@ (8001d90 <MX_TIM8_Init+0xd0>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001cfc:	4b24      	ldr	r3, [pc, #144]	@ (8001d90 <MX_TIM8_Init+0xd0>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d02:	4b23      	ldr	r3, [pc, #140]	@ (8001d90 <MX_TIM8_Init+0xd0>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d10:	2301      	movs	r3, #1
 8001d12:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001d18:	230f      	movs	r3, #15
 8001d1a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d20:	2301      	movs	r3, #1
 8001d22:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d24:	2300      	movs	r3, #0
 8001d26:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001d2c:	f107 030c 	add.w	r3, r7, #12
 8001d30:	4619      	mov	r1, r3
 8001d32:	4817      	ldr	r0, [pc, #92]	@ (8001d90 <MX_TIM8_Init+0xd0>)
 8001d34:	f001 fdaa 	bl	800388c <HAL_TIM_Encoder_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001d3e:	f000 f915 	bl	8001f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d42:	2300      	movs	r3, #0
 8001d44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001d4a:	1d3b      	adds	r3, r7, #4
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4810      	ldr	r0, [pc, #64]	@ (8001d90 <MX_TIM8_Init+0xd0>)
 8001d50:	f002 fb30 	bl	80043b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001d5a:	f000 f907 	bl	8001f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */
  htim8.Init.Period = Encoder_AZ.Puls.Pulses_per_revolution * 4;
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d98 <MX_TIM8_Init+0xd8>)
 8001d60:	8a9b      	ldrh	r3, [r3, #20]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	461a      	mov	r2, r3
 8001d66:	4b0a      	ldr	r3, [pc, #40]	@ (8001d90 <MX_TIM8_Init+0xd0>)
 8001d68:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK) {Error_Handler();}
 8001d6a:	f107 030c 	add.w	r3, r7, #12
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4807      	ldr	r0, [pc, #28]	@ (8001d90 <MX_TIM8_Init+0xd0>)
 8001d72:	f001 fd8b 	bl	800388c <HAL_TIM_Encoder_Init>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_TIM8_Init+0xc0>
 8001d7c:	f000 f8f6 	bl	8001f6c <Error_Handler>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8001d80:	213c      	movs	r1, #60	@ 0x3c
 8001d82:	4803      	ldr	r0, [pc, #12]	@ (8001d90 <MX_TIM8_Init+0xd0>)
 8001d84:	f001 fe28 	bl	80039d8 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM8_Init 2 */

}
 8001d88:	bf00      	nop
 8001d8a:	3730      	adds	r7, #48	@ 0x30
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	2000026c 	.word	0x2000026c
 8001d94:	40010400 	.word	0x40010400
 8001d98:	20000000 	.word	0x20000000

08001d9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001da0:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <MX_USART2_UART_Init+0x4c>)
 8001da2:	4a12      	ldr	r2, [pc, #72]	@ (8001dec <MX_USART2_UART_Init+0x50>)
 8001da4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8001da6:	4b10      	ldr	r3, [pc, #64]	@ (8001de8 <MX_USART2_UART_Init+0x4c>)
 8001da8:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001dac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dae:	4b0e      	ldr	r3, [pc, #56]	@ (8001de8 <MX_USART2_UART_Init+0x4c>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001db4:	4b0c      	ldr	r3, [pc, #48]	@ (8001de8 <MX_USART2_UART_Init+0x4c>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dba:	4b0b      	ldr	r3, [pc, #44]	@ (8001de8 <MX_USART2_UART_Init+0x4c>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dc0:	4b09      	ldr	r3, [pc, #36]	@ (8001de8 <MX_USART2_UART_Init+0x4c>)
 8001dc2:	220c      	movs	r2, #12
 8001dc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dc6:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <MX_USART2_UART_Init+0x4c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <MX_USART2_UART_Init+0x4c>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dd2:	4805      	ldr	r0, [pc, #20]	@ (8001de8 <MX_USART2_UART_Init+0x4c>)
 8001dd4:	f002 fb7e 	bl	80044d4 <HAL_UART_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001dde:	f000 f8c5 	bl	8001f6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200002b4 	.word	0x200002b4
 8001dec:	40004400 	.word	0x40004400

08001df0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08c      	sub	sp, #48	@ 0x30
 8001df4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df6:	f107 031c 	add.w	r3, r7, #28
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	60da      	str	r2, [r3, #12]
 8001e04:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	61bb      	str	r3, [r7, #24]
 8001e0a:	4b40      	ldr	r3, [pc, #256]	@ (8001f0c <MX_GPIO_Init+0x11c>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	4a3f      	ldr	r2, [pc, #252]	@ (8001f0c <MX_GPIO_Init+0x11c>)
 8001e10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e16:	4b3d      	ldr	r3, [pc, #244]	@ (8001f0c <MX_GPIO_Init+0x11c>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e1e:	61bb      	str	r3, [r7, #24]
 8001e20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	4b39      	ldr	r3, [pc, #228]	@ (8001f0c <MX_GPIO_Init+0x11c>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	4a38      	ldr	r2, [pc, #224]	@ (8001f0c <MX_GPIO_Init+0x11c>)
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e32:	4b36      	ldr	r3, [pc, #216]	@ (8001f0c <MX_GPIO_Init+0x11c>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	4b32      	ldr	r3, [pc, #200]	@ (8001f0c <MX_GPIO_Init+0x11c>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e46:	4a31      	ldr	r2, [pc, #196]	@ (8001f0c <MX_GPIO_Init+0x11c>)
 8001e48:	f043 0310 	orr.w	r3, r3, #16
 8001e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4e:	4b2f      	ldr	r3, [pc, #188]	@ (8001f0c <MX_GPIO_Init+0x11c>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	f003 0310 	and.w	r3, r3, #16
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	4b2b      	ldr	r3, [pc, #172]	@ (8001f0c <MX_GPIO_Init+0x11c>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	4a2a      	ldr	r2, [pc, #168]	@ (8001f0c <MX_GPIO_Init+0x11c>)
 8001e64:	f043 0308 	orr.w	r3, r3, #8
 8001e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6a:	4b28      	ldr	r3, [pc, #160]	@ (8001f0c <MX_GPIO_Init+0x11c>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	4b24      	ldr	r3, [pc, #144]	@ (8001f0c <MX_GPIO_Init+0x11c>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	4a23      	ldr	r2, [pc, #140]	@ (8001f0c <MX_GPIO_Init+0x11c>)
 8001e80:	f043 0304 	orr.w	r3, r3, #4
 8001e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e86:	4b21      	ldr	r3, [pc, #132]	@ (8001f0c <MX_GPIO_Init+0x11c>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	4b1d      	ldr	r3, [pc, #116]	@ (8001f0c <MX_GPIO_Init+0x11c>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8001f0c <MX_GPIO_Init+0x11c>)
 8001e9c:	f043 0302 	orr.w	r3, r3, #2
 8001ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f0c <MX_GPIO_Init+0x11c>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_SET);
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f44f 51d8 	mov.w	r1, #6912	@ 0x1b00
 8001eb4:	4816      	ldr	r0, [pc, #88]	@ (8001f10 <MX_GPIO_Init+0x120>)
 8001eb6:	f000 feaf 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001ec0:	4814      	ldr	r0, [pc, #80]	@ (8001f14 <MX_GPIO_Init+0x124>)
 8001ec2:	f000 fea9 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE8 PE9 PE11 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8001ec6:	f44f 53d8 	mov.w	r3, #6912	@ 0x1b00
 8001eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ed8:	f107 031c 	add.w	r3, r7, #28
 8001edc:	4619      	mov	r1, r3
 8001ede:	480c      	ldr	r0, [pc, #48]	@ (8001f10 <MX_GPIO_Init+0x120>)
 8001ee0:	f000 fcfe 	bl	80028e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001ee4:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001ee8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eea:	2301      	movs	r3, #1
 8001eec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ef6:	f107 031c 	add.w	r3, r7, #28
 8001efa:	4619      	mov	r1, r3
 8001efc:	4805      	ldr	r0, [pc, #20]	@ (8001f14 <MX_GPIO_Init+0x124>)
 8001efe:	f000 fcef 	bl	80028e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001f02:	bf00      	nop
 8001f04:	3730      	adds	r7, #48	@ 0x30
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40020c00 	.word	0x40020c00

08001f18 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
	Raspberry_DatPpars();
 8001f20:	f7ff f9d2 	bl	80012c8 <Raspberry_DatPpars>
	HAL_UART_Receive_IT(RP_message.Chanal, (uint8_t*)RP_message.Rx_data, Size_Rx_UART);
 8001f24:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <HAL_UART_RxCpltCallback+0x28>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a06      	ldr	r2, [pc, #24]	@ (8001f44 <HAL_UART_RxCpltCallback+0x2c>)
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	b292      	uxth	r2, r2
 8001f2e:	4906      	ldr	r1, [pc, #24]	@ (8001f48 <HAL_UART_RxCpltCallback+0x30>)
 8001f30:	4618      	mov	r0, r3
 8001f32:	f002 fb1f 	bl	8004574 <HAL_UART_Receive_IT>
};
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000060 	.word	0x20000060
 8001f44:	200002fc 	.word	0x200002fc
 8001f48:	20000065 	.word	0x20000065

08001f4c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {RP_message.transmitting = 0;}
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	4b04      	ldr	r3, [pc, #16]	@ (8001f68 <HAL_UART_TxCpltCallback+0x1c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	711a      	strb	r2, [r3, #4]
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	20000060 	.word	0x20000060

08001f6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f70:	2200      	movs	r2, #0
 8001f72:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f76:	4816      	ldr	r0, [pc, #88]	@ (8001fd0 <Error_Handler+0x64>)
 8001f78:	f000 fe4e 	bl	8002c18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f82:	4813      	ldr	r0, [pc, #76]	@ (8001fd0 <Error_Handler+0x64>)
 8001f84:	f000 fe48 	bl	8002c18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f8e:	4810      	ldr	r0, [pc, #64]	@ (8001fd0 <Error_Handler+0x64>)
 8001f90:	f000 fe42 	bl	8002c18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001f94:	2200      	movs	r2, #0
 8001f96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f9a:	480d      	ldr	r0, [pc, #52]	@ (8001fd0 <Error_Handler+0x64>)
 8001f9c:	f000 fe3c 	bl	8002c18 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa0:	b672      	cpsid	i
}
 8001fa2:	bf00      	nop
  __disable_irq();
  while (1)
  {
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001faa:	4809      	ldr	r0, [pc, #36]	@ (8001fd0 <Error_Handler+0x64>)
 8001fac:	f000 fe34 	bl	8002c18 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001fb0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001fb4:	f000 facc 	bl	8002550 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fbe:	4804      	ldr	r0, [pc, #16]	@ (8001fd0 <Error_Handler+0x64>)
 8001fc0:	f000 fe2a 	bl	8002c18 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001fc4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001fc8:	f000 fac2 	bl	8002550 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001fcc:	bf00      	nop
 8001fce:	e7e9      	b.n	8001fa4 <Error_Handler+0x38>
 8001fd0:	40020c00 	.word	0x40020c00

08001fd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	607b      	str	r3, [r7, #4]
 8001fde:	4b10      	ldr	r3, [pc, #64]	@ (8002020 <HAL_MspInit+0x4c>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe2:	4a0f      	ldr	r2, [pc, #60]	@ (8002020 <HAL_MspInit+0x4c>)
 8001fe4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fe8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fea:	4b0d      	ldr	r3, [pc, #52]	@ (8002020 <HAL_MspInit+0x4c>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ff2:	607b      	str	r3, [r7, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	603b      	str	r3, [r7, #0]
 8001ffa:	4b09      	ldr	r3, [pc, #36]	@ (8002020 <HAL_MspInit+0x4c>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffe:	4a08      	ldr	r2, [pc, #32]	@ (8002020 <HAL_MspInit+0x4c>)
 8002000:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002004:	6413      	str	r3, [r2, #64]	@ 0x40
 8002006:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <HAL_MspInit+0x4c>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40023800 	.word	0x40023800

08002024 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002034:	d10e      	bne.n	8002054 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	4b20      	ldr	r3, [pc, #128]	@ (80020bc <HAL_TIM_PWM_MspInit+0x98>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	4a1f      	ldr	r2, [pc, #124]	@ (80020bc <HAL_TIM_PWM_MspInit+0x98>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6413      	str	r3, [r2, #64]	@ 0x40
 8002046:	4b1d      	ldr	r3, [pc, #116]	@ (80020bc <HAL_TIM_PWM_MspInit+0x98>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002052:	e02e      	b.n	80020b2 <HAL_TIM_PWM_MspInit+0x8e>
  else if(htim_pwm->Instance==TIM3)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a19      	ldr	r2, [pc, #100]	@ (80020c0 <HAL_TIM_PWM_MspInit+0x9c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d10e      	bne.n	800207c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	4b16      	ldr	r3, [pc, #88]	@ (80020bc <HAL_TIM_PWM_MspInit+0x98>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002066:	4a15      	ldr	r2, [pc, #84]	@ (80020bc <HAL_TIM_PWM_MspInit+0x98>)
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	6413      	str	r3, [r2, #64]	@ 0x40
 800206e:	4b13      	ldr	r3, [pc, #76]	@ (80020bc <HAL_TIM_PWM_MspInit+0x98>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	693b      	ldr	r3, [r7, #16]
}
 800207a:	e01a      	b.n	80020b2 <HAL_TIM_PWM_MspInit+0x8e>
  else if(htim_pwm->Instance==TIM5)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a10      	ldr	r2, [pc, #64]	@ (80020c4 <HAL_TIM_PWM_MspInit+0xa0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d115      	bne.n	80020b2 <HAL_TIM_PWM_MspInit+0x8e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	4b0c      	ldr	r3, [pc, #48]	@ (80020bc <HAL_TIM_PWM_MspInit+0x98>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208e:	4a0b      	ldr	r2, [pc, #44]	@ (80020bc <HAL_TIM_PWM_MspInit+0x98>)
 8002090:	f043 0308 	orr.w	r3, r3, #8
 8002094:	6413      	str	r3, [r2, #64]	@ 0x40
 8002096:	4b09      	ldr	r3, [pc, #36]	@ (80020bc <HAL_TIM_PWM_MspInit+0x98>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2100      	movs	r1, #0
 80020a6:	2032      	movs	r0, #50	@ 0x32
 80020a8:	f000 fb51 	bl	800274e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80020ac:	2032      	movs	r0, #50	@ 0x32
 80020ae:	f000 fb6a 	bl	8002786 <HAL_NVIC_EnableIRQ>
}
 80020b2:	bf00      	nop
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40000400 	.word	0x40000400
 80020c4:	40000c00 	.word	0x40000c00

080020c8 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08c      	sub	sp, #48	@ 0x30
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 031c 	add.w	r3, r7, #28
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a32      	ldr	r2, [pc, #200]	@ (80021b0 <HAL_TIM_Encoder_MspInit+0xe8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d12c      	bne.n	8002144 <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	61bb      	str	r3, [r7, #24]
 80020ee:	4b31      	ldr	r3, [pc, #196]	@ (80021b4 <HAL_TIM_Encoder_MspInit+0xec>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f2:	4a30      	ldr	r2, [pc, #192]	@ (80021b4 <HAL_TIM_Encoder_MspInit+0xec>)
 80020f4:	f043 0304 	orr.w	r3, r3, #4
 80020f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020fa:	4b2e      	ldr	r3, [pc, #184]	@ (80021b4 <HAL_TIM_Encoder_MspInit+0xec>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	61bb      	str	r3, [r7, #24]
 8002104:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	4b2a      	ldr	r3, [pc, #168]	@ (80021b4 <HAL_TIM_Encoder_MspInit+0xec>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	4a29      	ldr	r2, [pc, #164]	@ (80021b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002110:	f043 0302 	orr.w	r3, r3, #2
 8002114:	6313      	str	r3, [r2, #48]	@ 0x30
 8002116:	4b27      	ldr	r3, [pc, #156]	@ (80021b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002122:	23c0      	movs	r3, #192	@ 0xc0
 8002124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800212a:	2301      	movs	r3, #1
 800212c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212e:	2303      	movs	r3, #3
 8002130:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002132:	2302      	movs	r3, #2
 8002134:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002136:	f107 031c 	add.w	r3, r7, #28
 800213a:	4619      	mov	r1, r3
 800213c:	481e      	ldr	r0, [pc, #120]	@ (80021b8 <HAL_TIM_Encoder_MspInit+0xf0>)
 800213e:	f000 fbcf 	bl	80028e0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002142:	e030      	b.n	80021a6 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a1c      	ldr	r2, [pc, #112]	@ (80021bc <HAL_TIM_Encoder_MspInit+0xf4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d12b      	bne.n	80021a6 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	4b18      	ldr	r3, [pc, #96]	@ (80021b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002156:	4a17      	ldr	r2, [pc, #92]	@ (80021b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002158:	f043 0302 	orr.w	r3, r3, #2
 800215c:	6453      	str	r3, [r2, #68]	@ 0x44
 800215e:	4b15      	ldr	r3, [pc, #84]	@ (80021b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	4b11      	ldr	r3, [pc, #68]	@ (80021b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	4a10      	ldr	r2, [pc, #64]	@ (80021b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002174:	f043 0304 	orr.w	r3, r3, #4
 8002178:	6313      	str	r3, [r2, #48]	@ 0x30
 800217a:	4b0e      	ldr	r3, [pc, #56]	@ (80021b4 <HAL_TIM_Encoder_MspInit+0xec>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002186:	23c0      	movs	r3, #192	@ 0xc0
 8002188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218a:	2302      	movs	r3, #2
 800218c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800218e:	2301      	movs	r3, #1
 8002190:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002192:	2303      	movs	r3, #3
 8002194:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002196:	2303      	movs	r3, #3
 8002198:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800219a:	f107 031c 	add.w	r3, r7, #28
 800219e:	4619      	mov	r1, r3
 80021a0:	4807      	ldr	r0, [pc, #28]	@ (80021c0 <HAL_TIM_Encoder_MspInit+0xf8>)
 80021a2:	f000 fb9d 	bl	80028e0 <HAL_GPIO_Init>
}
 80021a6:	bf00      	nop
 80021a8:	3730      	adds	r7, #48	@ 0x30
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40000800 	.word	0x40000800
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40020400 	.word	0x40020400
 80021bc:	40010400 	.word	0x40010400
 80021c0:	40020800 	.word	0x40020800

080021c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08a      	sub	sp, #40	@ 0x28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021e4:	d11e      	bne.n	8002224 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	4b34      	ldr	r3, [pc, #208]	@ (80022bc <HAL_TIM_MspPostInit+0xf8>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	4a33      	ldr	r2, [pc, #204]	@ (80022bc <HAL_TIM_MspPostInit+0xf8>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021f6:	4b31      	ldr	r3, [pc, #196]	@ (80022bc <HAL_TIM_MspPostInit+0xf8>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002202:	2320      	movs	r3, #32
 8002204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002206:	2302      	movs	r3, #2
 8002208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220e:	2300      	movs	r3, #0
 8002210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002212:	2301      	movs	r3, #1
 8002214:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002216:	f107 0314 	add.w	r3, r7, #20
 800221a:	4619      	mov	r1, r3
 800221c:	4828      	ldr	r0, [pc, #160]	@ (80022c0 <HAL_TIM_MspPostInit+0xfc>)
 800221e:	f000 fb5f 	bl	80028e0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002222:	e046      	b.n	80022b2 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a26      	ldr	r2, [pc, #152]	@ (80022c4 <HAL_TIM_MspPostInit+0x100>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d11e      	bne.n	800226c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	4b22      	ldr	r3, [pc, #136]	@ (80022bc <HAL_TIM_MspPostInit+0xf8>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	4a21      	ldr	r2, [pc, #132]	@ (80022bc <HAL_TIM_MspPostInit+0xf8>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	6313      	str	r3, [r2, #48]	@ 0x30
 800223e:	4b1f      	ldr	r3, [pc, #124]	@ (80022bc <HAL_TIM_MspPostInit+0xf8>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800224a:	2340      	movs	r3, #64	@ 0x40
 800224c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224e:	2302      	movs	r3, #2
 8002250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002256:	2300      	movs	r3, #0
 8002258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800225a:	2302      	movs	r3, #2
 800225c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225e:	f107 0314 	add.w	r3, r7, #20
 8002262:	4619      	mov	r1, r3
 8002264:	4816      	ldr	r0, [pc, #88]	@ (80022c0 <HAL_TIM_MspPostInit+0xfc>)
 8002266:	f000 fb3b 	bl	80028e0 <HAL_GPIO_Init>
}
 800226a:	e022      	b.n	80022b2 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM5)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a15      	ldr	r2, [pc, #84]	@ (80022c8 <HAL_TIM_MspPostInit+0x104>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d11d      	bne.n	80022b2 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	4b10      	ldr	r3, [pc, #64]	@ (80022bc <HAL_TIM_MspPostInit+0xf8>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	4a0f      	ldr	r2, [pc, #60]	@ (80022bc <HAL_TIM_MspPostInit+0xf8>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6313      	str	r3, [r2, #48]	@ 0x30
 8002286:	4b0d      	ldr	r3, [pc, #52]	@ (80022bc <HAL_TIM_MspPostInit+0xf8>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002292:	2301      	movs	r3, #1
 8002294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002296:	2302      	movs	r3, #2
 8002298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229e:	2303      	movs	r3, #3
 80022a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80022a2:	2302      	movs	r3, #2
 80022a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a6:	f107 0314 	add.w	r3, r7, #20
 80022aa:	4619      	mov	r1, r3
 80022ac:	4804      	ldr	r0, [pc, #16]	@ (80022c0 <HAL_TIM_MspPostInit+0xfc>)
 80022ae:	f000 fb17 	bl	80028e0 <HAL_GPIO_Init>
}
 80022b2:	bf00      	nop
 80022b4:	3728      	adds	r7, #40	@ 0x28
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40020000 	.word	0x40020000
 80022c4:	40000400 	.word	0x40000400
 80022c8:	40000c00 	.word	0x40000c00

080022cc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08a      	sub	sp, #40	@ 0x28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002360 <HAL_UART_MspInit+0x94>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d133      	bne.n	8002356 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002364 <HAL_UART_MspInit+0x98>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f6:	4a1b      	ldr	r2, [pc, #108]	@ (8002364 <HAL_UART_MspInit+0x98>)
 80022f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80022fe:	4b19      	ldr	r3, [pc, #100]	@ (8002364 <HAL_UART_MspInit+0x98>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	4b15      	ldr	r3, [pc, #84]	@ (8002364 <HAL_UART_MspInit+0x98>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002312:	4a14      	ldr	r2, [pc, #80]	@ (8002364 <HAL_UART_MspInit+0x98>)
 8002314:	f043 0308 	orr.w	r3, r3, #8
 8002318:	6313      	str	r3, [r2, #48]	@ 0x30
 800231a:	4b12      	ldr	r3, [pc, #72]	@ (8002364 <HAL_UART_MspInit+0x98>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002326:	2360      	movs	r3, #96	@ 0x60
 8002328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232a:	2302      	movs	r3, #2
 800232c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002332:	2303      	movs	r3, #3
 8002334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002336:	2307      	movs	r3, #7
 8002338:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800233a:	f107 0314 	add.w	r3, r7, #20
 800233e:	4619      	mov	r1, r3
 8002340:	4809      	ldr	r0, [pc, #36]	@ (8002368 <HAL_UART_MspInit+0x9c>)
 8002342:	f000 facd 	bl	80028e0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002346:	2200      	movs	r2, #0
 8002348:	2100      	movs	r1, #0
 800234a:	2026      	movs	r0, #38	@ 0x26
 800234c:	f000 f9ff 	bl	800274e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002350:	2026      	movs	r0, #38	@ 0x26
 8002352:	f000 fa18 	bl	8002786 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002356:	bf00      	nop
 8002358:	3728      	adds	r7, #40	@ 0x28
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40004400 	.word	0x40004400
 8002364:	40023800 	.word	0x40023800
 8002368:	40020c00 	.word	0x40020c00

0800236c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002370:	bf00      	nop
 8002372:	e7fd      	b.n	8002370 <NMI_Handler+0x4>

08002374 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002378:	bf00      	nop
 800237a:	e7fd      	b.n	8002378 <HardFault_Handler+0x4>

0800237c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002380:	bf00      	nop
 8002382:	e7fd      	b.n	8002380 <MemManage_Handler+0x4>

08002384 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002388:	bf00      	nop
 800238a:	e7fd      	b.n	8002388 <BusFault_Handler+0x4>

0800238c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002390:	bf00      	nop
 8002392:	e7fd      	b.n	8002390 <UsageFault_Handler+0x4>

08002394 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023a2:	b480      	push	{r7}
 80023a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023c2:	f000 f8a5 	bl	8002510 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023d0:	4802      	ldr	r0, [pc, #8]	@ (80023dc <USART2_IRQHandler+0x10>)
 80023d2:	f002 f8f5 	bl	80045c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	200002b4 	.word	0x200002b4

080023e0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80023e4:	4802      	ldr	r0, [pc, #8]	@ (80023f0 <TIM5_IRQHandler+0x10>)
 80023e6:	f001 fb85 	bl	8003af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000224 	.word	0x20000224

080023f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023f8:	4b06      	ldr	r3, [pc, #24]	@ (8002414 <SystemInit+0x20>)
 80023fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023fe:	4a05      	ldr	r2, [pc, #20]	@ (8002414 <SystemInit+0x20>)
 8002400:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002404:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	e000ed00 	.word	0xe000ed00

08002418 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002418:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002450 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800241c:	f7ff ffea 	bl	80023f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002420:	480c      	ldr	r0, [pc, #48]	@ (8002454 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002422:	490d      	ldr	r1, [pc, #52]	@ (8002458 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002424:	4a0d      	ldr	r2, [pc, #52]	@ (800245c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002428:	e002      	b.n	8002430 <LoopCopyDataInit>

0800242a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800242a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800242c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800242e:	3304      	adds	r3, #4

08002430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002434:	d3f9      	bcc.n	800242a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002436:	4a0a      	ldr	r2, [pc, #40]	@ (8002460 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002438:	4c0a      	ldr	r4, [pc, #40]	@ (8002464 <LoopFillZerobss+0x22>)
  movs r3, #0
 800243a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800243c:	e001      	b.n	8002442 <LoopFillZerobss>

0800243e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800243e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002440:	3204      	adds	r2, #4

08002442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002444:	d3fb      	bcc.n	800243e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002446:	f002 ffcb 	bl	80053e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800244a:	f7ff f923 	bl	8001694 <main>
  bx  lr    
 800244e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002450:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002458:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 800245c:	08005468 	.word	0x08005468
  ldr r2, =_sbss
 8002460:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 8002464:	20000320 	.word	0x20000320

08002468 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002468:	e7fe      	b.n	8002468 <ADC_IRQHandler>
	...

0800246c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002470:	4b0e      	ldr	r3, [pc, #56]	@ (80024ac <HAL_Init+0x40>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a0d      	ldr	r2, [pc, #52]	@ (80024ac <HAL_Init+0x40>)
 8002476:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800247a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800247c:	4b0b      	ldr	r3, [pc, #44]	@ (80024ac <HAL_Init+0x40>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a0a      	ldr	r2, [pc, #40]	@ (80024ac <HAL_Init+0x40>)
 8002482:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002486:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002488:	4b08      	ldr	r3, [pc, #32]	@ (80024ac <HAL_Init+0x40>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a07      	ldr	r2, [pc, #28]	@ (80024ac <HAL_Init+0x40>)
 800248e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002492:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002494:	2003      	movs	r0, #3
 8002496:	f000 f94f 	bl	8002738 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800249a:	200f      	movs	r0, #15
 800249c:	f000 f808 	bl	80024b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024a0:	f7ff fd98 	bl	8001fd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40023c00 	.word	0x40023c00

080024b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024b8:	4b12      	ldr	r3, [pc, #72]	@ (8002504 <HAL_InitTick+0x54>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4b12      	ldr	r3, [pc, #72]	@ (8002508 <HAL_InitTick+0x58>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	4619      	mov	r1, r3
 80024c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 f967 	bl	80027a2 <HAL_SYSTICK_Config>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e00e      	b.n	80024fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b0f      	cmp	r3, #15
 80024e2:	d80a      	bhi.n	80024fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024e4:	2200      	movs	r2, #0
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ec:	f000 f92f 	bl	800274e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024f0:	4a06      	ldr	r2, [pc, #24]	@ (800250c <HAL_InitTick+0x5c>)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
 80024f8:	e000      	b.n	80024fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20000120 	.word	0x20000120
 8002508:	20000128 	.word	0x20000128
 800250c:	20000124 	.word	0x20000124

08002510 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002514:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <HAL_IncTick+0x20>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	4b06      	ldr	r3, [pc, #24]	@ (8002534 <HAL_IncTick+0x24>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4413      	add	r3, r2
 8002520:	4a04      	ldr	r2, [pc, #16]	@ (8002534 <HAL_IncTick+0x24>)
 8002522:	6013      	str	r3, [r2, #0]
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	20000128 	.word	0x20000128
 8002534:	2000031c 	.word	0x2000031c

08002538 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return uwTick;
 800253c:	4b03      	ldr	r3, [pc, #12]	@ (800254c <HAL_GetTick+0x14>)
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	2000031c 	.word	0x2000031c

08002550 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002558:	f7ff ffee 	bl	8002538 <HAL_GetTick>
 800255c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002568:	d005      	beq.n	8002576 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800256a:	4b0a      	ldr	r3, [pc, #40]	@ (8002594 <HAL_Delay+0x44>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	461a      	mov	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4413      	add	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002576:	bf00      	nop
 8002578:	f7ff ffde 	bl	8002538 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	429a      	cmp	r2, r3
 8002586:	d8f7      	bhi.n	8002578 <HAL_Delay+0x28>
  {
  }
}
 8002588:	bf00      	nop
 800258a:	bf00      	nop
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000128 	.word	0x20000128

08002598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a8:	4b0c      	ldr	r3, [pc, #48]	@ (80025dc <__NVIC_SetPriorityGrouping+0x44>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025b4:	4013      	ands	r3, r2
 80025b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ca:	4a04      	ldr	r2, [pc, #16]	@ (80025dc <__NVIC_SetPriorityGrouping+0x44>)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	60d3      	str	r3, [r2, #12]
}
 80025d0:	bf00      	nop
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e4:	4b04      	ldr	r3, [pc, #16]	@ (80025f8 <__NVIC_GetPriorityGrouping+0x18>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	0a1b      	lsrs	r3, r3, #8
 80025ea:	f003 0307 	and.w	r3, r3, #7
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260a:	2b00      	cmp	r3, #0
 800260c:	db0b      	blt.n	8002626 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	f003 021f 	and.w	r2, r3, #31
 8002614:	4907      	ldr	r1, [pc, #28]	@ (8002634 <__NVIC_EnableIRQ+0x38>)
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	095b      	lsrs	r3, r3, #5
 800261c:	2001      	movs	r0, #1
 800261e:	fa00 f202 	lsl.w	r2, r0, r2
 8002622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	e000e100 	.word	0xe000e100

08002638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	6039      	str	r1, [r7, #0]
 8002642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002648:	2b00      	cmp	r3, #0
 800264a:	db0a      	blt.n	8002662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	b2da      	uxtb	r2, r3
 8002650:	490c      	ldr	r1, [pc, #48]	@ (8002684 <__NVIC_SetPriority+0x4c>)
 8002652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002656:	0112      	lsls	r2, r2, #4
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	440b      	add	r3, r1
 800265c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002660:	e00a      	b.n	8002678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	b2da      	uxtb	r2, r3
 8002666:	4908      	ldr	r1, [pc, #32]	@ (8002688 <__NVIC_SetPriority+0x50>)
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	3b04      	subs	r3, #4
 8002670:	0112      	lsls	r2, r2, #4
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	440b      	add	r3, r1
 8002676:	761a      	strb	r2, [r3, #24]
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	e000e100 	.word	0xe000e100
 8002688:	e000ed00 	.word	0xe000ed00

0800268c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800268c:	b480      	push	{r7}
 800268e:	b089      	sub	sp, #36	@ 0x24
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f1c3 0307 	rsb	r3, r3, #7
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	bf28      	it	cs
 80026aa:	2304      	movcs	r3, #4
 80026ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	3304      	adds	r3, #4
 80026b2:	2b06      	cmp	r3, #6
 80026b4:	d902      	bls.n	80026bc <NVIC_EncodePriority+0x30>
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	3b03      	subs	r3, #3
 80026ba:	e000      	b.n	80026be <NVIC_EncodePriority+0x32>
 80026bc:	2300      	movs	r3, #0
 80026be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c0:	f04f 32ff 	mov.w	r2, #4294967295
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43da      	mvns	r2, r3
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	401a      	ands	r2, r3
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d4:	f04f 31ff 	mov.w	r1, #4294967295
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	fa01 f303 	lsl.w	r3, r1, r3
 80026de:	43d9      	mvns	r1, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e4:	4313      	orrs	r3, r2
         );
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3724      	adds	r7, #36	@ 0x24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
	...

080026f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3b01      	subs	r3, #1
 8002700:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002704:	d301      	bcc.n	800270a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002706:	2301      	movs	r3, #1
 8002708:	e00f      	b.n	800272a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800270a:	4a0a      	ldr	r2, [pc, #40]	@ (8002734 <SysTick_Config+0x40>)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3b01      	subs	r3, #1
 8002710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002712:	210f      	movs	r1, #15
 8002714:	f04f 30ff 	mov.w	r0, #4294967295
 8002718:	f7ff ff8e 	bl	8002638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800271c:	4b05      	ldr	r3, [pc, #20]	@ (8002734 <SysTick_Config+0x40>)
 800271e:	2200      	movs	r2, #0
 8002720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002722:	4b04      	ldr	r3, [pc, #16]	@ (8002734 <SysTick_Config+0x40>)
 8002724:	2207      	movs	r2, #7
 8002726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	e000e010 	.word	0xe000e010

08002738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7ff ff29 	bl	8002598 <__NVIC_SetPriorityGrouping>
}
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800274e:	b580      	push	{r7, lr}
 8002750:	b086      	sub	sp, #24
 8002752:	af00      	add	r7, sp, #0
 8002754:	4603      	mov	r3, r0
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
 800275a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002760:	f7ff ff3e 	bl	80025e0 <__NVIC_GetPriorityGrouping>
 8002764:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	68b9      	ldr	r1, [r7, #8]
 800276a:	6978      	ldr	r0, [r7, #20]
 800276c:	f7ff ff8e 	bl	800268c <NVIC_EncodePriority>
 8002770:	4602      	mov	r2, r0
 8002772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002776:	4611      	mov	r1, r2
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff5d 	bl	8002638 <__NVIC_SetPriority>
}
 800277e:	bf00      	nop
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	4603      	mov	r3, r0
 800278e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff ff31 	bl	80025fc <__NVIC_EnableIRQ>
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff ffa2 	bl	80026f4 <SysTick_Config>
 80027b0:	4603      	mov	r3, r0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b084      	sub	sp, #16
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027c8:	f7ff feb6 	bl	8002538 <HAL_GetTick>
 80027cc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d008      	beq.n	80027ec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2280      	movs	r2, #128	@ 0x80
 80027de:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e052      	b.n	8002892 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0216 	bic.w	r2, r2, #22
 80027fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	695a      	ldr	r2, [r3, #20]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800280a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002810:	2b00      	cmp	r3, #0
 8002812:	d103      	bne.n	800281c <HAL_DMA_Abort+0x62>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002818:	2b00      	cmp	r3, #0
 800281a:	d007      	beq.n	800282c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0208 	bic.w	r2, r2, #8
 800282a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0201 	bic.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800283c:	e013      	b.n	8002866 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800283e:	f7ff fe7b 	bl	8002538 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b05      	cmp	r3, #5
 800284a:	d90c      	bls.n	8002866 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2220      	movs	r2, #32
 8002850:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2203      	movs	r2, #3
 8002856:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e015      	b.n	8002892 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1e4      	bne.n	800283e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002878:	223f      	movs	r2, #63	@ 0x3f
 800287a:	409a      	lsls	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d004      	beq.n	80028b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2280      	movs	r2, #128	@ 0x80
 80028b2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e00c      	b.n	80028d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2205      	movs	r2, #5
 80028bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0201 	bic.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
	...

080028e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b089      	sub	sp, #36	@ 0x24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
 80028fa:	e16b      	b.n	8002bd4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028fc:	2201      	movs	r2, #1
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	4013      	ands	r3, r2
 800290e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	429a      	cmp	r2, r3
 8002916:	f040 815a 	bne.w	8002bce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	2b01      	cmp	r3, #1
 8002924:	d005      	beq.n	8002932 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800292e:	2b02      	cmp	r3, #2
 8002930:	d130      	bne.n	8002994 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	2203      	movs	r2, #3
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4013      	ands	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002968:	2201      	movs	r2, #1
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	f003 0201 	and.w	r2, r3, #1
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	2b03      	cmp	r3, #3
 800299e:	d017      	beq.n	80029d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	2203      	movs	r2, #3
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 0303 	and.w	r3, r3, #3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d123      	bne.n	8002a24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	08da      	lsrs	r2, r3, #3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3208      	adds	r2, #8
 80029e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	220f      	movs	r2, #15
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	691a      	ldr	r2, [r3, #16]
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	08da      	lsrs	r2, r3, #3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3208      	adds	r2, #8
 8002a1e:	69b9      	ldr	r1, [r7, #24]
 8002a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	2203      	movs	r2, #3
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 0203 	and.w	r2, r3, #3
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 80b4 	beq.w	8002bce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	4b60      	ldr	r3, [pc, #384]	@ (8002bec <HAL_GPIO_Init+0x30c>)
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6e:	4a5f      	ldr	r2, [pc, #380]	@ (8002bec <HAL_GPIO_Init+0x30c>)
 8002a70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a74:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a76:	4b5d      	ldr	r3, [pc, #372]	@ (8002bec <HAL_GPIO_Init+0x30c>)
 8002a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a82:	4a5b      	ldr	r2, [pc, #364]	@ (8002bf0 <HAL_GPIO_Init+0x310>)
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	089b      	lsrs	r3, r3, #2
 8002a88:	3302      	adds	r3, #2
 8002a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	220f      	movs	r2, #15
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a52      	ldr	r2, [pc, #328]	@ (8002bf4 <HAL_GPIO_Init+0x314>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d02b      	beq.n	8002b06 <HAL_GPIO_Init+0x226>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a51      	ldr	r2, [pc, #324]	@ (8002bf8 <HAL_GPIO_Init+0x318>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d025      	beq.n	8002b02 <HAL_GPIO_Init+0x222>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a50      	ldr	r2, [pc, #320]	@ (8002bfc <HAL_GPIO_Init+0x31c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d01f      	beq.n	8002afe <HAL_GPIO_Init+0x21e>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a4f      	ldr	r2, [pc, #316]	@ (8002c00 <HAL_GPIO_Init+0x320>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d019      	beq.n	8002afa <HAL_GPIO_Init+0x21a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a4e      	ldr	r2, [pc, #312]	@ (8002c04 <HAL_GPIO_Init+0x324>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d013      	beq.n	8002af6 <HAL_GPIO_Init+0x216>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a4d      	ldr	r2, [pc, #308]	@ (8002c08 <HAL_GPIO_Init+0x328>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d00d      	beq.n	8002af2 <HAL_GPIO_Init+0x212>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a4c      	ldr	r2, [pc, #304]	@ (8002c0c <HAL_GPIO_Init+0x32c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d007      	beq.n	8002aee <HAL_GPIO_Init+0x20e>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a4b      	ldr	r2, [pc, #300]	@ (8002c10 <HAL_GPIO_Init+0x330>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d101      	bne.n	8002aea <HAL_GPIO_Init+0x20a>
 8002ae6:	2307      	movs	r3, #7
 8002ae8:	e00e      	b.n	8002b08 <HAL_GPIO_Init+0x228>
 8002aea:	2308      	movs	r3, #8
 8002aec:	e00c      	b.n	8002b08 <HAL_GPIO_Init+0x228>
 8002aee:	2306      	movs	r3, #6
 8002af0:	e00a      	b.n	8002b08 <HAL_GPIO_Init+0x228>
 8002af2:	2305      	movs	r3, #5
 8002af4:	e008      	b.n	8002b08 <HAL_GPIO_Init+0x228>
 8002af6:	2304      	movs	r3, #4
 8002af8:	e006      	b.n	8002b08 <HAL_GPIO_Init+0x228>
 8002afa:	2303      	movs	r3, #3
 8002afc:	e004      	b.n	8002b08 <HAL_GPIO_Init+0x228>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e002      	b.n	8002b08 <HAL_GPIO_Init+0x228>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <HAL_GPIO_Init+0x228>
 8002b06:	2300      	movs	r3, #0
 8002b08:	69fa      	ldr	r2, [r7, #28]
 8002b0a:	f002 0203 	and.w	r2, r2, #3
 8002b0e:	0092      	lsls	r2, r2, #2
 8002b10:	4093      	lsls	r3, r2
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b18:	4935      	ldr	r1, [pc, #212]	@ (8002bf0 <HAL_GPIO_Init+0x310>)
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	089b      	lsrs	r3, r3, #2
 8002b1e:	3302      	adds	r3, #2
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b26:	4b3b      	ldr	r3, [pc, #236]	@ (8002c14 <HAL_GPIO_Init+0x334>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4013      	ands	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b4a:	4a32      	ldr	r2, [pc, #200]	@ (8002c14 <HAL_GPIO_Init+0x334>)
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b50:	4b30      	ldr	r3, [pc, #192]	@ (8002c14 <HAL_GPIO_Init+0x334>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b74:	4a27      	ldr	r2, [pc, #156]	@ (8002c14 <HAL_GPIO_Init+0x334>)
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b7a:	4b26      	ldr	r3, [pc, #152]	@ (8002c14 <HAL_GPIO_Init+0x334>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	43db      	mvns	r3, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4013      	ands	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8002c14 <HAL_GPIO_Init+0x334>)
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c14 <HAL_GPIO_Init+0x334>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bc8:	4a12      	ldr	r2, [pc, #72]	@ (8002c14 <HAL_GPIO_Init+0x334>)
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	61fb      	str	r3, [r7, #28]
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	2b0f      	cmp	r3, #15
 8002bd8:	f67f ae90 	bls.w	80028fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bdc:	bf00      	nop
 8002bde:	bf00      	nop
 8002be0:	3724      	adds	r7, #36	@ 0x24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	40013800 	.word	0x40013800
 8002bf4:	40020000 	.word	0x40020000
 8002bf8:	40020400 	.word	0x40020400
 8002bfc:	40020800 	.word	0x40020800
 8002c00:	40020c00 	.word	0x40020c00
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40021400 	.word	0x40021400
 8002c0c:	40021800 	.word	0x40021800
 8002c10:	40021c00 	.word	0x40021c00
 8002c14:	40013c00 	.word	0x40013c00

08002c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	460b      	mov	r3, r1
 8002c22:	807b      	strh	r3, [r7, #2]
 8002c24:	4613      	mov	r3, r2
 8002c26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c28:	787b      	ldrb	r3, [r7, #1]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c2e:	887a      	ldrh	r2, [r7, #2]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c34:	e003      	b.n	8002c3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c36:	887b      	ldrh	r3, [r7, #2]
 8002c38:	041a      	lsls	r2, r3, #16
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	619a      	str	r2, [r3, #24]
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
	...

08002c4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e267      	b.n	800312e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d075      	beq.n	8002d56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c6a:	4b88      	ldr	r3, [pc, #544]	@ (8002e8c <HAL_RCC_OscConfig+0x240>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d00c      	beq.n	8002c90 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c76:	4b85      	ldr	r3, [pc, #532]	@ (8002e8c <HAL_RCC_OscConfig+0x240>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d112      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c82:	4b82      	ldr	r3, [pc, #520]	@ (8002e8c <HAL_RCC_OscConfig+0x240>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c8e:	d10b      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c90:	4b7e      	ldr	r3, [pc, #504]	@ (8002e8c <HAL_RCC_OscConfig+0x240>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d05b      	beq.n	8002d54 <HAL_RCC_OscConfig+0x108>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d157      	bne.n	8002d54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e242      	b.n	800312e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cb0:	d106      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x74>
 8002cb2:	4b76      	ldr	r3, [pc, #472]	@ (8002e8c <HAL_RCC_OscConfig+0x240>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a75      	ldr	r2, [pc, #468]	@ (8002e8c <HAL_RCC_OscConfig+0x240>)
 8002cb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	e01d      	b.n	8002cfc <HAL_RCC_OscConfig+0xb0>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cc8:	d10c      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x98>
 8002cca:	4b70      	ldr	r3, [pc, #448]	@ (8002e8c <HAL_RCC_OscConfig+0x240>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a6f      	ldr	r2, [pc, #444]	@ (8002e8c <HAL_RCC_OscConfig+0x240>)
 8002cd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	4b6d      	ldr	r3, [pc, #436]	@ (8002e8c <HAL_RCC_OscConfig+0x240>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a6c      	ldr	r2, [pc, #432]	@ (8002e8c <HAL_RCC_OscConfig+0x240>)
 8002cdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	e00b      	b.n	8002cfc <HAL_RCC_OscConfig+0xb0>
 8002ce4:	4b69      	ldr	r3, [pc, #420]	@ (8002e8c <HAL_RCC_OscConfig+0x240>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a68      	ldr	r2, [pc, #416]	@ (8002e8c <HAL_RCC_OscConfig+0x240>)
 8002cea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cee:	6013      	str	r3, [r2, #0]
 8002cf0:	4b66      	ldr	r3, [pc, #408]	@ (8002e8c <HAL_RCC_OscConfig+0x240>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a65      	ldr	r2, [pc, #404]	@ (8002e8c <HAL_RCC_OscConfig+0x240>)
 8002cf6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d013      	beq.n	8002d2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d04:	f7ff fc18 	bl	8002538 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d0c:	f7ff fc14 	bl	8002538 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b64      	cmp	r3, #100	@ 0x64
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e207      	b.n	800312e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1e:	4b5b      	ldr	r3, [pc, #364]	@ (8002e8c <HAL_RCC_OscConfig+0x240>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0xc0>
 8002d2a:	e014      	b.n	8002d56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2c:	f7ff fc04 	bl	8002538 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d34:	f7ff fc00 	bl	8002538 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b64      	cmp	r3, #100	@ 0x64
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e1f3      	b.n	800312e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d46:	4b51      	ldr	r3, [pc, #324]	@ (8002e8c <HAL_RCC_OscConfig+0x240>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f0      	bne.n	8002d34 <HAL_RCC_OscConfig+0xe8>
 8002d52:	e000      	b.n	8002d56 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d063      	beq.n	8002e2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d62:	4b4a      	ldr	r3, [pc, #296]	@ (8002e8c <HAL_RCC_OscConfig+0x240>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 030c 	and.w	r3, r3, #12
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00b      	beq.n	8002d86 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d6e:	4b47      	ldr	r3, [pc, #284]	@ (8002e8c <HAL_RCC_OscConfig+0x240>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d11c      	bne.n	8002db4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d7a:	4b44      	ldr	r3, [pc, #272]	@ (8002e8c <HAL_RCC_OscConfig+0x240>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d116      	bne.n	8002db4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d86:	4b41      	ldr	r3, [pc, #260]	@ (8002e8c <HAL_RCC_OscConfig+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d005      	beq.n	8002d9e <HAL_RCC_OscConfig+0x152>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d001      	beq.n	8002d9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e1c7      	b.n	800312e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d9e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e8c <HAL_RCC_OscConfig+0x240>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	4937      	ldr	r1, [pc, #220]	@ (8002e8c <HAL_RCC_OscConfig+0x240>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002db2:	e03a      	b.n	8002e2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d020      	beq.n	8002dfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dbc:	4b34      	ldr	r3, [pc, #208]	@ (8002e90 <HAL_RCC_OscConfig+0x244>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc2:	f7ff fbb9 	bl	8002538 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dca:	f7ff fbb5 	bl	8002538 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e1a8      	b.n	800312e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8002e8c <HAL_RCC_OscConfig+0x240>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0f0      	beq.n	8002dca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de8:	4b28      	ldr	r3, [pc, #160]	@ (8002e8c <HAL_RCC_OscConfig+0x240>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	4925      	ldr	r1, [pc, #148]	@ (8002e8c <HAL_RCC_OscConfig+0x240>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	600b      	str	r3, [r1, #0]
 8002dfc:	e015      	b.n	8002e2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dfe:	4b24      	ldr	r3, [pc, #144]	@ (8002e90 <HAL_RCC_OscConfig+0x244>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e04:	f7ff fb98 	bl	8002538 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e0c:	f7ff fb94 	bl	8002538 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e187      	b.n	800312e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002e8c <HAL_RCC_OscConfig+0x240>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f0      	bne.n	8002e0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d036      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d016      	beq.n	8002e6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e3e:	4b15      	ldr	r3, [pc, #84]	@ (8002e94 <HAL_RCC_OscConfig+0x248>)
 8002e40:	2201      	movs	r2, #1
 8002e42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e44:	f7ff fb78 	bl	8002538 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e4c:	f7ff fb74 	bl	8002538 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e167      	b.n	800312e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e8c <HAL_RCC_OscConfig+0x240>)
 8002e60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0f0      	beq.n	8002e4c <HAL_RCC_OscConfig+0x200>
 8002e6a:	e01b      	b.n	8002ea4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e6c:	4b09      	ldr	r3, [pc, #36]	@ (8002e94 <HAL_RCC_OscConfig+0x248>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e72:	f7ff fb61 	bl	8002538 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e78:	e00e      	b.n	8002e98 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e7a:	f7ff fb5d 	bl	8002538 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d907      	bls.n	8002e98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e150      	b.n	800312e <HAL_RCC_OscConfig+0x4e2>
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	42470000 	.word	0x42470000
 8002e94:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e98:	4b88      	ldr	r3, [pc, #544]	@ (80030bc <HAL_RCC_OscConfig+0x470>)
 8002e9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1ea      	bne.n	8002e7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 8097 	beq.w	8002fe0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eb6:	4b81      	ldr	r3, [pc, #516]	@ (80030bc <HAL_RCC_OscConfig+0x470>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10f      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	4b7d      	ldr	r3, [pc, #500]	@ (80030bc <HAL_RCC_OscConfig+0x470>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eca:	4a7c      	ldr	r2, [pc, #496]	@ (80030bc <HAL_RCC_OscConfig+0x470>)
 8002ecc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ed0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ed2:	4b7a      	ldr	r3, [pc, #488]	@ (80030bc <HAL_RCC_OscConfig+0x470>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eda:	60bb      	str	r3, [r7, #8]
 8002edc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee2:	4b77      	ldr	r3, [pc, #476]	@ (80030c0 <HAL_RCC_OscConfig+0x474>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d118      	bne.n	8002f20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eee:	4b74      	ldr	r3, [pc, #464]	@ (80030c0 <HAL_RCC_OscConfig+0x474>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a73      	ldr	r2, [pc, #460]	@ (80030c0 <HAL_RCC_OscConfig+0x474>)
 8002ef4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ef8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002efa:	f7ff fb1d 	bl	8002538 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f02:	f7ff fb19 	bl	8002538 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e10c      	b.n	800312e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f14:	4b6a      	ldr	r3, [pc, #424]	@ (80030c0 <HAL_RCC_OscConfig+0x474>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0f0      	beq.n	8002f02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d106      	bne.n	8002f36 <HAL_RCC_OscConfig+0x2ea>
 8002f28:	4b64      	ldr	r3, [pc, #400]	@ (80030bc <HAL_RCC_OscConfig+0x470>)
 8002f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2c:	4a63      	ldr	r2, [pc, #396]	@ (80030bc <HAL_RCC_OscConfig+0x470>)
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f34:	e01c      	b.n	8002f70 <HAL_RCC_OscConfig+0x324>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	2b05      	cmp	r3, #5
 8002f3c:	d10c      	bne.n	8002f58 <HAL_RCC_OscConfig+0x30c>
 8002f3e:	4b5f      	ldr	r3, [pc, #380]	@ (80030bc <HAL_RCC_OscConfig+0x470>)
 8002f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f42:	4a5e      	ldr	r2, [pc, #376]	@ (80030bc <HAL_RCC_OscConfig+0x470>)
 8002f44:	f043 0304 	orr.w	r3, r3, #4
 8002f48:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f4a:	4b5c      	ldr	r3, [pc, #368]	@ (80030bc <HAL_RCC_OscConfig+0x470>)
 8002f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f4e:	4a5b      	ldr	r2, [pc, #364]	@ (80030bc <HAL_RCC_OscConfig+0x470>)
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f56:	e00b      	b.n	8002f70 <HAL_RCC_OscConfig+0x324>
 8002f58:	4b58      	ldr	r3, [pc, #352]	@ (80030bc <HAL_RCC_OscConfig+0x470>)
 8002f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f5c:	4a57      	ldr	r2, [pc, #348]	@ (80030bc <HAL_RCC_OscConfig+0x470>)
 8002f5e:	f023 0301 	bic.w	r3, r3, #1
 8002f62:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f64:	4b55      	ldr	r3, [pc, #340]	@ (80030bc <HAL_RCC_OscConfig+0x470>)
 8002f66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f68:	4a54      	ldr	r2, [pc, #336]	@ (80030bc <HAL_RCC_OscConfig+0x470>)
 8002f6a:	f023 0304 	bic.w	r3, r3, #4
 8002f6e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d015      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f78:	f7ff fade 	bl	8002538 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f7e:	e00a      	b.n	8002f96 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f80:	f7ff fada 	bl	8002538 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e0cb      	b.n	800312e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f96:	4b49      	ldr	r3, [pc, #292]	@ (80030bc <HAL_RCC_OscConfig+0x470>)
 8002f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0ee      	beq.n	8002f80 <HAL_RCC_OscConfig+0x334>
 8002fa2:	e014      	b.n	8002fce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa4:	f7ff fac8 	bl	8002538 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002faa:	e00a      	b.n	8002fc2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fac:	f7ff fac4 	bl	8002538 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e0b5      	b.n	800312e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc2:	4b3e      	ldr	r3, [pc, #248]	@ (80030bc <HAL_RCC_OscConfig+0x470>)
 8002fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1ee      	bne.n	8002fac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fce:	7dfb      	ldrb	r3, [r7, #23]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d105      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd4:	4b39      	ldr	r3, [pc, #228]	@ (80030bc <HAL_RCC_OscConfig+0x470>)
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd8:	4a38      	ldr	r2, [pc, #224]	@ (80030bc <HAL_RCC_OscConfig+0x470>)
 8002fda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fde:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 80a1 	beq.w	800312c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fea:	4b34      	ldr	r3, [pc, #208]	@ (80030bc <HAL_RCC_OscConfig+0x470>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 030c 	and.w	r3, r3, #12
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d05c      	beq.n	80030b0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d141      	bne.n	8003082 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ffe:	4b31      	ldr	r3, [pc, #196]	@ (80030c4 <HAL_RCC_OscConfig+0x478>)
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003004:	f7ff fa98 	bl	8002538 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800300c:	f7ff fa94 	bl	8002538 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e087      	b.n	800312e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301e:	4b27      	ldr	r3, [pc, #156]	@ (80030bc <HAL_RCC_OscConfig+0x470>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69da      	ldr	r2, [r3, #28]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003038:	019b      	lsls	r3, r3, #6
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003040:	085b      	lsrs	r3, r3, #1
 8003042:	3b01      	subs	r3, #1
 8003044:	041b      	lsls	r3, r3, #16
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304c:	061b      	lsls	r3, r3, #24
 800304e:	491b      	ldr	r1, [pc, #108]	@ (80030bc <HAL_RCC_OscConfig+0x470>)
 8003050:	4313      	orrs	r3, r2
 8003052:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003054:	4b1b      	ldr	r3, [pc, #108]	@ (80030c4 <HAL_RCC_OscConfig+0x478>)
 8003056:	2201      	movs	r2, #1
 8003058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305a:	f7ff fa6d 	bl	8002538 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003062:	f7ff fa69 	bl	8002538 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e05c      	b.n	800312e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003074:	4b11      	ldr	r3, [pc, #68]	@ (80030bc <HAL_RCC_OscConfig+0x470>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0f0      	beq.n	8003062 <HAL_RCC_OscConfig+0x416>
 8003080:	e054      	b.n	800312c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003082:	4b10      	ldr	r3, [pc, #64]	@ (80030c4 <HAL_RCC_OscConfig+0x478>)
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003088:	f7ff fa56 	bl	8002538 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003090:	f7ff fa52 	bl	8002538 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e045      	b.n	800312e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a2:	4b06      	ldr	r3, [pc, #24]	@ (80030bc <HAL_RCC_OscConfig+0x470>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x444>
 80030ae:	e03d      	b.n	800312c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d107      	bne.n	80030c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e038      	b.n	800312e <HAL_RCC_OscConfig+0x4e2>
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40007000 	.word	0x40007000
 80030c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003138 <HAL_RCC_OscConfig+0x4ec>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d028      	beq.n	8003128 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d121      	bne.n	8003128 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d11a      	bne.n	8003128 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030f8:	4013      	ands	r3, r2
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003100:	4293      	cmp	r3, r2
 8003102:	d111      	bne.n	8003128 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800310e:	085b      	lsrs	r3, r3, #1
 8003110:	3b01      	subs	r3, #1
 8003112:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003114:	429a      	cmp	r2, r3
 8003116:	d107      	bne.n	8003128 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003122:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003124:	429a      	cmp	r2, r3
 8003126:	d001      	beq.n	800312c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e000      	b.n	800312e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800

0800313c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0cc      	b.n	80032ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003150:	4b68      	ldr	r3, [pc, #416]	@ (80032f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d90c      	bls.n	8003178 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315e:	4b65      	ldr	r3, [pc, #404]	@ (80032f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003166:	4b63      	ldr	r3, [pc, #396]	@ (80032f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	429a      	cmp	r2, r3
 8003172:	d001      	beq.n	8003178 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e0b8      	b.n	80032ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d020      	beq.n	80031c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d005      	beq.n	800319c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003190:	4b59      	ldr	r3, [pc, #356]	@ (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	4a58      	ldr	r2, [pc, #352]	@ (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800319a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0308 	and.w	r3, r3, #8
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d005      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031a8:	4b53      	ldr	r3, [pc, #332]	@ (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	4a52      	ldr	r2, [pc, #328]	@ (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80031b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b4:	4b50      	ldr	r3, [pc, #320]	@ (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	494d      	ldr	r1, [pc, #308]	@ (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d044      	beq.n	800325c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d107      	bne.n	80031ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031da:	4b47      	ldr	r3, [pc, #284]	@ (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d119      	bne.n	800321a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e07f      	b.n	80032ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d003      	beq.n	80031fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031f6:	2b03      	cmp	r3, #3
 80031f8:	d107      	bne.n	800320a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031fa:	4b3f      	ldr	r3, [pc, #252]	@ (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d109      	bne.n	800321a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e06f      	b.n	80032ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320a:	4b3b      	ldr	r3, [pc, #236]	@ (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e067      	b.n	80032ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800321a:	4b37      	ldr	r3, [pc, #220]	@ (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f023 0203 	bic.w	r2, r3, #3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	4934      	ldr	r1, [pc, #208]	@ (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003228:	4313      	orrs	r3, r2
 800322a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800322c:	f7ff f984 	bl	8002538 <HAL_GetTick>
 8003230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003232:	e00a      	b.n	800324a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003234:	f7ff f980 	bl	8002538 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003242:	4293      	cmp	r3, r2
 8003244:	d901      	bls.n	800324a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e04f      	b.n	80032ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324a:	4b2b      	ldr	r3, [pc, #172]	@ (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 020c 	and.w	r2, r3, #12
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	429a      	cmp	r2, r3
 800325a:	d1eb      	bne.n	8003234 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800325c:	4b25      	ldr	r3, [pc, #148]	@ (80032f4 <HAL_RCC_ClockConfig+0x1b8>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d20c      	bcs.n	8003284 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326a:	4b22      	ldr	r3, [pc, #136]	@ (80032f4 <HAL_RCC_ClockConfig+0x1b8>)
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003272:	4b20      	ldr	r3, [pc, #128]	@ (80032f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d001      	beq.n	8003284 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e032      	b.n	80032ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	d008      	beq.n	80032a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003290:	4b19      	ldr	r3, [pc, #100]	@ (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	4916      	ldr	r1, [pc, #88]	@ (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d009      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ae:	4b12      	ldr	r3, [pc, #72]	@ (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	490e      	ldr	r1, [pc, #56]	@ (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032c2:	f000 f821 	bl	8003308 <HAL_RCC_GetSysClockFreq>
 80032c6:	4602      	mov	r2, r0
 80032c8:	4b0b      	ldr	r3, [pc, #44]	@ (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	091b      	lsrs	r3, r3, #4
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	490a      	ldr	r1, [pc, #40]	@ (80032fc <HAL_RCC_ClockConfig+0x1c0>)
 80032d4:	5ccb      	ldrb	r3, [r1, r3]
 80032d6:	fa22 f303 	lsr.w	r3, r2, r3
 80032da:	4a09      	ldr	r2, [pc, #36]	@ (8003300 <HAL_RCC_ClockConfig+0x1c4>)
 80032dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80032de:	4b09      	ldr	r3, [pc, #36]	@ (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff f8e4 	bl	80024b0 <HAL_InitTick>

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	40023c00 	.word	0x40023c00
 80032f8:	40023800 	.word	0x40023800
 80032fc:	08005440 	.word	0x08005440
 8003300:	20000120 	.word	0x20000120
 8003304:	20000124 	.word	0x20000124

08003308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800330c:	b094      	sub	sp, #80	@ 0x50
 800330e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003314:	2300      	movs	r3, #0
 8003316:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003320:	4b79      	ldr	r3, [pc, #484]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x200>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 030c 	and.w	r3, r3, #12
 8003328:	2b08      	cmp	r3, #8
 800332a:	d00d      	beq.n	8003348 <HAL_RCC_GetSysClockFreq+0x40>
 800332c:	2b08      	cmp	r3, #8
 800332e:	f200 80e1 	bhi.w	80034f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003332:	2b00      	cmp	r3, #0
 8003334:	d002      	beq.n	800333c <HAL_RCC_GetSysClockFreq+0x34>
 8003336:	2b04      	cmp	r3, #4
 8003338:	d003      	beq.n	8003342 <HAL_RCC_GetSysClockFreq+0x3a>
 800333a:	e0db      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800333c:	4b73      	ldr	r3, [pc, #460]	@ (800350c <HAL_RCC_GetSysClockFreq+0x204>)
 800333e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003340:	e0db      	b.n	80034fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003342:	4b73      	ldr	r3, [pc, #460]	@ (8003510 <HAL_RCC_GetSysClockFreq+0x208>)
 8003344:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003346:	e0d8      	b.n	80034fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003348:	4b6f      	ldr	r3, [pc, #444]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x200>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003350:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003352:	4b6d      	ldr	r3, [pc, #436]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x200>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d063      	beq.n	8003426 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800335e:	4b6a      	ldr	r3, [pc, #424]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x200>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	099b      	lsrs	r3, r3, #6
 8003364:	2200      	movs	r2, #0
 8003366:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003368:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800336a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800336c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003370:	633b      	str	r3, [r7, #48]	@ 0x30
 8003372:	2300      	movs	r3, #0
 8003374:	637b      	str	r3, [r7, #52]	@ 0x34
 8003376:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800337a:	4622      	mov	r2, r4
 800337c:	462b      	mov	r3, r5
 800337e:	f04f 0000 	mov.w	r0, #0
 8003382:	f04f 0100 	mov.w	r1, #0
 8003386:	0159      	lsls	r1, r3, #5
 8003388:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800338c:	0150      	lsls	r0, r2, #5
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	4621      	mov	r1, r4
 8003394:	1a51      	subs	r1, r2, r1
 8003396:	6139      	str	r1, [r7, #16]
 8003398:	4629      	mov	r1, r5
 800339a:	eb63 0301 	sbc.w	r3, r3, r1
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	f04f 0200 	mov.w	r2, #0
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033ac:	4659      	mov	r1, fp
 80033ae:	018b      	lsls	r3, r1, #6
 80033b0:	4651      	mov	r1, sl
 80033b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033b6:	4651      	mov	r1, sl
 80033b8:	018a      	lsls	r2, r1, #6
 80033ba:	4651      	mov	r1, sl
 80033bc:	ebb2 0801 	subs.w	r8, r2, r1
 80033c0:	4659      	mov	r1, fp
 80033c2:	eb63 0901 	sbc.w	r9, r3, r1
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033da:	4690      	mov	r8, r2
 80033dc:	4699      	mov	r9, r3
 80033de:	4623      	mov	r3, r4
 80033e0:	eb18 0303 	adds.w	r3, r8, r3
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	462b      	mov	r3, r5
 80033e8:	eb49 0303 	adc.w	r3, r9, r3
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	f04f 0200 	mov.w	r2, #0
 80033f2:	f04f 0300 	mov.w	r3, #0
 80033f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033fa:	4629      	mov	r1, r5
 80033fc:	024b      	lsls	r3, r1, #9
 80033fe:	4621      	mov	r1, r4
 8003400:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003404:	4621      	mov	r1, r4
 8003406:	024a      	lsls	r2, r1, #9
 8003408:	4610      	mov	r0, r2
 800340a:	4619      	mov	r1, r3
 800340c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800340e:	2200      	movs	r2, #0
 8003410:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003412:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003414:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003418:	f7fd faf4 	bl	8000a04 <__aeabi_uldivmod>
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	4613      	mov	r3, r2
 8003422:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003424:	e058      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003426:	4b38      	ldr	r3, [pc, #224]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x200>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	099b      	lsrs	r3, r3, #6
 800342c:	2200      	movs	r2, #0
 800342e:	4618      	mov	r0, r3
 8003430:	4611      	mov	r1, r2
 8003432:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003436:	623b      	str	r3, [r7, #32]
 8003438:	2300      	movs	r3, #0
 800343a:	627b      	str	r3, [r7, #36]	@ 0x24
 800343c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003440:	4642      	mov	r2, r8
 8003442:	464b      	mov	r3, r9
 8003444:	f04f 0000 	mov.w	r0, #0
 8003448:	f04f 0100 	mov.w	r1, #0
 800344c:	0159      	lsls	r1, r3, #5
 800344e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003452:	0150      	lsls	r0, r2, #5
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	4641      	mov	r1, r8
 800345a:	ebb2 0a01 	subs.w	sl, r2, r1
 800345e:	4649      	mov	r1, r9
 8003460:	eb63 0b01 	sbc.w	fp, r3, r1
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003470:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003474:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003478:	ebb2 040a 	subs.w	r4, r2, sl
 800347c:	eb63 050b 	sbc.w	r5, r3, fp
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	f04f 0300 	mov.w	r3, #0
 8003488:	00eb      	lsls	r3, r5, #3
 800348a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800348e:	00e2      	lsls	r2, r4, #3
 8003490:	4614      	mov	r4, r2
 8003492:	461d      	mov	r5, r3
 8003494:	4643      	mov	r3, r8
 8003496:	18e3      	adds	r3, r4, r3
 8003498:	603b      	str	r3, [r7, #0]
 800349a:	464b      	mov	r3, r9
 800349c:	eb45 0303 	adc.w	r3, r5, r3
 80034a0:	607b      	str	r3, [r7, #4]
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	f04f 0300 	mov.w	r3, #0
 80034aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034ae:	4629      	mov	r1, r5
 80034b0:	028b      	lsls	r3, r1, #10
 80034b2:	4621      	mov	r1, r4
 80034b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034b8:	4621      	mov	r1, r4
 80034ba:	028a      	lsls	r2, r1, #10
 80034bc:	4610      	mov	r0, r2
 80034be:	4619      	mov	r1, r3
 80034c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034c2:	2200      	movs	r2, #0
 80034c4:	61bb      	str	r3, [r7, #24]
 80034c6:	61fa      	str	r2, [r7, #28]
 80034c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034cc:	f7fd fa9a 	bl	8000a04 <__aeabi_uldivmod>
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	4613      	mov	r3, r2
 80034d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80034d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x200>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	0c1b      	lsrs	r3, r3, #16
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	3301      	adds	r3, #1
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80034e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80034ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034f2:	e002      	b.n	80034fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034f4:	4b05      	ldr	r3, [pc, #20]	@ (800350c <HAL_RCC_GetSysClockFreq+0x204>)
 80034f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3750      	adds	r7, #80	@ 0x50
 8003500:	46bd      	mov	sp, r7
 8003502:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003506:	bf00      	nop
 8003508:	40023800 	.word	0x40023800
 800350c:	00f42400 	.word	0x00f42400
 8003510:	007a1200 	.word	0x007a1200

08003514 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003518:	4b03      	ldr	r3, [pc, #12]	@ (8003528 <HAL_RCC_GetHCLKFreq+0x14>)
 800351a:	681b      	ldr	r3, [r3, #0]
}
 800351c:	4618      	mov	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	20000120 	.word	0x20000120

0800352c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003530:	f7ff fff0 	bl	8003514 <HAL_RCC_GetHCLKFreq>
 8003534:	4602      	mov	r2, r0
 8003536:	4b05      	ldr	r3, [pc, #20]	@ (800354c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	0a9b      	lsrs	r3, r3, #10
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	4903      	ldr	r1, [pc, #12]	@ (8003550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003542:	5ccb      	ldrb	r3, [r1, r3]
 8003544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003548:	4618      	mov	r0, r3
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40023800 	.word	0x40023800
 8003550:	08005450 	.word	0x08005450

08003554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003558:	f7ff ffdc 	bl	8003514 <HAL_RCC_GetHCLKFreq>
 800355c:	4602      	mov	r2, r0
 800355e:	4b05      	ldr	r3, [pc, #20]	@ (8003574 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	0b5b      	lsrs	r3, r3, #13
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	4903      	ldr	r1, [pc, #12]	@ (8003578 <HAL_RCC_GetPCLK2Freq+0x24>)
 800356a:	5ccb      	ldrb	r3, [r1, r3]
 800356c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003570:	4618      	mov	r0, r3
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40023800 	.word	0x40023800
 8003578:	08005450 	.word	0x08005450

0800357c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e041      	b.n	8003612 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d106      	bne.n	80035a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fe fd3e 	bl	8002024 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3304      	adds	r3, #4
 80035b8:	4619      	mov	r1, r3
 80035ba:	4610      	mov	r0, r2
 80035bc:	f000 fc7e 	bl	8003ebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d109      	bne.n	8003640 <HAL_TIM_PWM_Start+0x24>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b01      	cmp	r3, #1
 8003636:	bf14      	ite	ne
 8003638:	2301      	movne	r3, #1
 800363a:	2300      	moveq	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	e022      	b.n	8003686 <HAL_TIM_PWM_Start+0x6a>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	2b04      	cmp	r3, #4
 8003644:	d109      	bne.n	800365a <HAL_TIM_PWM_Start+0x3e>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b01      	cmp	r3, #1
 8003650:	bf14      	ite	ne
 8003652:	2301      	movne	r3, #1
 8003654:	2300      	moveq	r3, #0
 8003656:	b2db      	uxtb	r3, r3
 8003658:	e015      	b.n	8003686 <HAL_TIM_PWM_Start+0x6a>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b08      	cmp	r3, #8
 800365e:	d109      	bne.n	8003674 <HAL_TIM_PWM_Start+0x58>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b01      	cmp	r3, #1
 800366a:	bf14      	ite	ne
 800366c:	2301      	movne	r3, #1
 800366e:	2300      	moveq	r3, #0
 8003670:	b2db      	uxtb	r3, r3
 8003672:	e008      	b.n	8003686 <HAL_TIM_PWM_Start+0x6a>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b01      	cmp	r3, #1
 800367e:	bf14      	ite	ne
 8003680:	2301      	movne	r3, #1
 8003682:	2300      	moveq	r3, #0
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e07c      	b.n	8003788 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d104      	bne.n	800369e <HAL_TIM_PWM_Start+0x82>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800369c:	e013      	b.n	80036c6 <HAL_TIM_PWM_Start+0xaa>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d104      	bne.n	80036ae <HAL_TIM_PWM_Start+0x92>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036ac:	e00b      	b.n	80036c6 <HAL_TIM_PWM_Start+0xaa>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d104      	bne.n	80036be <HAL_TIM_PWM_Start+0xa2>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036bc:	e003      	b.n	80036c6 <HAL_TIM_PWM_Start+0xaa>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2202      	movs	r2, #2
 80036c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2201      	movs	r2, #1
 80036cc:	6839      	ldr	r1, [r7, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 fe4a 	bl	8004368 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a2d      	ldr	r2, [pc, #180]	@ (8003790 <HAL_TIM_PWM_Start+0x174>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d004      	beq.n	80036e8 <HAL_TIM_PWM_Start+0xcc>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a2c      	ldr	r2, [pc, #176]	@ (8003794 <HAL_TIM_PWM_Start+0x178>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d101      	bne.n	80036ec <HAL_TIM_PWM_Start+0xd0>
 80036e8:	2301      	movs	r3, #1
 80036ea:	e000      	b.n	80036ee <HAL_TIM_PWM_Start+0xd2>
 80036ec:	2300      	movs	r3, #0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d007      	beq.n	8003702 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003700:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a22      	ldr	r2, [pc, #136]	@ (8003790 <HAL_TIM_PWM_Start+0x174>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d022      	beq.n	8003752 <HAL_TIM_PWM_Start+0x136>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003714:	d01d      	beq.n	8003752 <HAL_TIM_PWM_Start+0x136>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a1f      	ldr	r2, [pc, #124]	@ (8003798 <HAL_TIM_PWM_Start+0x17c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d018      	beq.n	8003752 <HAL_TIM_PWM_Start+0x136>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a1d      	ldr	r2, [pc, #116]	@ (800379c <HAL_TIM_PWM_Start+0x180>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d013      	beq.n	8003752 <HAL_TIM_PWM_Start+0x136>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a1c      	ldr	r2, [pc, #112]	@ (80037a0 <HAL_TIM_PWM_Start+0x184>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d00e      	beq.n	8003752 <HAL_TIM_PWM_Start+0x136>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a16      	ldr	r2, [pc, #88]	@ (8003794 <HAL_TIM_PWM_Start+0x178>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d009      	beq.n	8003752 <HAL_TIM_PWM_Start+0x136>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a18      	ldr	r2, [pc, #96]	@ (80037a4 <HAL_TIM_PWM_Start+0x188>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d004      	beq.n	8003752 <HAL_TIM_PWM_Start+0x136>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a16      	ldr	r2, [pc, #88]	@ (80037a8 <HAL_TIM_PWM_Start+0x18c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d111      	bne.n	8003776 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2b06      	cmp	r3, #6
 8003762:	d010      	beq.n	8003786 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003774:	e007      	b.n	8003786 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f042 0201 	orr.w	r2, r2, #1
 8003784:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40010000 	.word	0x40010000
 8003794:	40010400 	.word	0x40010400
 8003798:	40000400 	.word	0x40000400
 800379c:	40000800 	.word	0x40000800
 80037a0:	40000c00 	.word	0x40000c00
 80037a4:	40014000 	.word	0x40014000
 80037a8:	40001800 	.word	0x40001800

080037ac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2200      	movs	r2, #0
 80037bc:	6839      	ldr	r1, [r7, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 fdd2 	bl	8004368 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a2e      	ldr	r2, [pc, #184]	@ (8003884 <HAL_TIM_PWM_Stop+0xd8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d004      	beq.n	80037d8 <HAL_TIM_PWM_Stop+0x2c>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a2d      	ldr	r2, [pc, #180]	@ (8003888 <HAL_TIM_PWM_Stop+0xdc>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d101      	bne.n	80037dc <HAL_TIM_PWM_Stop+0x30>
 80037d8:	2301      	movs	r3, #1
 80037da:	e000      	b.n	80037de <HAL_TIM_PWM_Stop+0x32>
 80037dc:	2300      	movs	r3, #0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d017      	beq.n	8003812 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6a1a      	ldr	r2, [r3, #32]
 80037e8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80037ec:	4013      	ands	r3, r2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10f      	bne.n	8003812 <HAL_TIM_PWM_Stop+0x66>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6a1a      	ldr	r2, [r3, #32]
 80037f8:	f240 4344 	movw	r3, #1092	@ 0x444
 80037fc:	4013      	ands	r3, r2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d107      	bne.n	8003812 <HAL_TIM_PWM_Stop+0x66>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003810:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6a1a      	ldr	r2, [r3, #32]
 8003818:	f241 1311 	movw	r3, #4369	@ 0x1111
 800381c:	4013      	ands	r3, r2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10f      	bne.n	8003842 <HAL_TIM_PWM_Stop+0x96>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6a1a      	ldr	r2, [r3, #32]
 8003828:	f240 4344 	movw	r3, #1092	@ 0x444
 800382c:	4013      	ands	r3, r2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d107      	bne.n	8003842 <HAL_TIM_PWM_Stop+0x96>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0201 	bic.w	r2, r2, #1
 8003840:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d104      	bne.n	8003852 <HAL_TIM_PWM_Stop+0xa6>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003850:	e013      	b.n	800387a <HAL_TIM_PWM_Stop+0xce>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b04      	cmp	r3, #4
 8003856:	d104      	bne.n	8003862 <HAL_TIM_PWM_Stop+0xb6>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003860:	e00b      	b.n	800387a <HAL_TIM_PWM_Stop+0xce>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b08      	cmp	r3, #8
 8003866:	d104      	bne.n	8003872 <HAL_TIM_PWM_Stop+0xc6>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003870:	e003      	b.n	800387a <HAL_TIM_PWM_Stop+0xce>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40010000 	.word	0x40010000
 8003888:	40010400 	.word	0x40010400

0800388c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e097      	b.n	80039d0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d106      	bne.n	80038ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7fe fc07 	bl	80020c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2202      	movs	r2, #2
 80038be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6812      	ldr	r2, [r2, #0]
 80038cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038d0:	f023 0307 	bic.w	r3, r3, #7
 80038d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3304      	adds	r3, #4
 80038de:	4619      	mov	r1, r3
 80038e0:	4610      	mov	r0, r2
 80038e2:	f000 faeb 	bl	8003ebc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	4313      	orrs	r3, r2
 8003906:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800390e:	f023 0303 	bic.w	r3, r3, #3
 8003912:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	021b      	lsls	r3, r3, #8
 800391e:	4313      	orrs	r3, r2
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800392c:	f023 030c 	bic.w	r3, r3, #12
 8003930:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003938:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800393c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	021b      	lsls	r3, r3, #8
 8003948:	4313      	orrs	r3, r2
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	011a      	lsls	r2, r3, #4
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	031b      	lsls	r3, r3, #12
 800395c:	4313      	orrs	r3, r2
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800396a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003972:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	4313      	orrs	r3, r2
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	4313      	orrs	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039e8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80039f0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039f8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003a00:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d110      	bne.n	8003a2a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d102      	bne.n	8003a14 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a0e:	7b7b      	ldrb	r3, [r7, #13]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d001      	beq.n	8003a18 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e069      	b.n	8003aec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a28:	e031      	b.n	8003a8e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b04      	cmp	r3, #4
 8003a2e:	d110      	bne.n	8003a52 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a30:	7bbb      	ldrb	r3, [r7, #14]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d102      	bne.n	8003a3c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a36:	7b3b      	ldrb	r3, [r7, #12]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d001      	beq.n	8003a40 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e055      	b.n	8003aec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2202      	movs	r2, #2
 8003a44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a50:	e01d      	b.n	8003a8e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a52:	7bfb      	ldrb	r3, [r7, #15]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d108      	bne.n	8003a6a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a58:	7bbb      	ldrb	r3, [r7, #14]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d105      	bne.n	8003a6a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a5e:	7b7b      	ldrb	r3, [r7, #13]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d102      	bne.n	8003a6a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a64:	7b3b      	ldrb	r3, [r7, #12]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d001      	beq.n	8003a6e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e03e      	b.n	8003aec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2202      	movs	r2, #2
 8003a72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2202      	movs	r2, #2
 8003a7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2202      	movs	r2, #2
 8003a82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2202      	movs	r2, #2
 8003a8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_TIM_Encoder_Start+0xc4>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d008      	beq.n	8003aac <HAL_TIM_Encoder_Start+0xd4>
 8003a9a:	e00f      	b.n	8003abc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 fc5f 	bl	8004368 <TIM_CCxChannelCmd>
      break;
 8003aaa:	e016      	b.n	8003ada <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	2104      	movs	r1, #4
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 fc57 	bl	8004368 <TIM_CCxChannelCmd>
      break;
 8003aba:	e00e      	b.n	8003ada <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 fc4f 	bl	8004368 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	2104      	movs	r1, #4
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 fc48 	bl	8004368 <TIM_CCxChannelCmd>
      break;
 8003ad8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f042 0201 	orr.w	r2, r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d020      	beq.n	8003b58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d01b      	beq.n	8003b58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f06f 0202 	mvn.w	r2, #2
 8003b28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f99e 	bl	8003e80 <HAL_TIM_IC_CaptureCallback>
 8003b44:	e005      	b.n	8003b52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f990 	bl	8003e6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f9a1 	bl	8003e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d020      	beq.n	8003ba4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d01b      	beq.n	8003ba4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f06f 0204 	mvn.w	r2, #4
 8003b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2202      	movs	r2, #2
 8003b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f978 	bl	8003e80 <HAL_TIM_IC_CaptureCallback>
 8003b90:	e005      	b.n	8003b9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f96a 	bl	8003e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f97b 	bl	8003e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d020      	beq.n	8003bf0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f003 0308 	and.w	r3, r3, #8
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d01b      	beq.n	8003bf0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f06f 0208 	mvn.w	r2, #8
 8003bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2204      	movs	r2, #4
 8003bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f952 	bl	8003e80 <HAL_TIM_IC_CaptureCallback>
 8003bdc:	e005      	b.n	8003bea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f944 	bl	8003e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f955 	bl	8003e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	f003 0310 	and.w	r3, r3, #16
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d020      	beq.n	8003c3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f003 0310 	and.w	r3, r3, #16
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d01b      	beq.n	8003c3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f06f 0210 	mvn.w	r2, #16
 8003c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2208      	movs	r2, #8
 8003c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f92c 	bl	8003e80 <HAL_TIM_IC_CaptureCallback>
 8003c28:	e005      	b.n	8003c36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f91e 	bl	8003e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f92f 	bl	8003e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00c      	beq.n	8003c60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d007      	beq.n	8003c60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0201 	mvn.w	r2, #1
 8003c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f8fc 	bl	8003e58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00c      	beq.n	8003c84 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d007      	beq.n	8003c84 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fc1e 	bl	80044c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00c      	beq.n	8003ca8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d007      	beq.n	8003ca8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f900 	bl	8003ea8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00c      	beq.n	8003ccc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f003 0320 	and.w	r3, r3, #32
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d007      	beq.n	8003ccc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f06f 0220 	mvn.w	r2, #32
 8003cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 fbf0 	bl	80044ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ccc:	bf00      	nop
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d101      	bne.n	8003cf2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	e0ae      	b.n	8003e50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b0c      	cmp	r3, #12
 8003cfe:	f200 809f 	bhi.w	8003e40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d02:	a201      	add	r2, pc, #4	@ (adr r2, 8003d08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d08:	08003d3d 	.word	0x08003d3d
 8003d0c:	08003e41 	.word	0x08003e41
 8003d10:	08003e41 	.word	0x08003e41
 8003d14:	08003e41 	.word	0x08003e41
 8003d18:	08003d7d 	.word	0x08003d7d
 8003d1c:	08003e41 	.word	0x08003e41
 8003d20:	08003e41 	.word	0x08003e41
 8003d24:	08003e41 	.word	0x08003e41
 8003d28:	08003dbf 	.word	0x08003dbf
 8003d2c:	08003e41 	.word	0x08003e41
 8003d30:	08003e41 	.word	0x08003e41
 8003d34:	08003e41 	.word	0x08003e41
 8003d38:	08003dff 	.word	0x08003dff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68b9      	ldr	r1, [r7, #8]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 f960 	bl	8004008 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699a      	ldr	r2, [r3, #24]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0208 	orr.w	r2, r2, #8
 8003d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699a      	ldr	r2, [r3, #24]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0204 	bic.w	r2, r2, #4
 8003d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6999      	ldr	r1, [r3, #24]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	691a      	ldr	r2, [r3, #16]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	619a      	str	r2, [r3, #24]
      break;
 8003d7a:	e064      	b.n	8003e46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68b9      	ldr	r1, [r7, #8]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 f9b0 	bl	80040e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699a      	ldr	r2, [r3, #24]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699a      	ldr	r2, [r3, #24]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6999      	ldr	r1, [r3, #24]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	021a      	lsls	r2, r3, #8
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	619a      	str	r2, [r3, #24]
      break;
 8003dbc:	e043      	b.n	8003e46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68b9      	ldr	r1, [r7, #8]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 fa05 	bl	80041d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69da      	ldr	r2, [r3, #28]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f042 0208 	orr.w	r2, r2, #8
 8003dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	69da      	ldr	r2, [r3, #28]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0204 	bic.w	r2, r2, #4
 8003de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69d9      	ldr	r1, [r3, #28]
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	691a      	ldr	r2, [r3, #16]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	61da      	str	r2, [r3, #28]
      break;
 8003dfc:	e023      	b.n	8003e46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68b9      	ldr	r1, [r7, #8]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 fa59 	bl	80042bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69da      	ldr	r2, [r3, #28]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69da      	ldr	r2, [r3, #28]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	69d9      	ldr	r1, [r3, #28]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	021a      	lsls	r2, r3, #8
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	61da      	str	r2, [r3, #28]
      break;
 8003e3e:	e002      	b.n	8003e46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	75fb      	strb	r3, [r7, #23]
      break;
 8003e44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a43      	ldr	r2, [pc, #268]	@ (8003fdc <TIM_Base_SetConfig+0x120>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d013      	beq.n	8003efc <TIM_Base_SetConfig+0x40>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eda:	d00f      	beq.n	8003efc <TIM_Base_SetConfig+0x40>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a40      	ldr	r2, [pc, #256]	@ (8003fe0 <TIM_Base_SetConfig+0x124>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d00b      	beq.n	8003efc <TIM_Base_SetConfig+0x40>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a3f      	ldr	r2, [pc, #252]	@ (8003fe4 <TIM_Base_SetConfig+0x128>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d007      	beq.n	8003efc <TIM_Base_SetConfig+0x40>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a3e      	ldr	r2, [pc, #248]	@ (8003fe8 <TIM_Base_SetConfig+0x12c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d003      	beq.n	8003efc <TIM_Base_SetConfig+0x40>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a3d      	ldr	r2, [pc, #244]	@ (8003fec <TIM_Base_SetConfig+0x130>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d108      	bne.n	8003f0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a32      	ldr	r2, [pc, #200]	@ (8003fdc <TIM_Base_SetConfig+0x120>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d02b      	beq.n	8003f6e <TIM_Base_SetConfig+0xb2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f1c:	d027      	beq.n	8003f6e <TIM_Base_SetConfig+0xb2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a2f      	ldr	r2, [pc, #188]	@ (8003fe0 <TIM_Base_SetConfig+0x124>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d023      	beq.n	8003f6e <TIM_Base_SetConfig+0xb2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a2e      	ldr	r2, [pc, #184]	@ (8003fe4 <TIM_Base_SetConfig+0x128>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d01f      	beq.n	8003f6e <TIM_Base_SetConfig+0xb2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a2d      	ldr	r2, [pc, #180]	@ (8003fe8 <TIM_Base_SetConfig+0x12c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d01b      	beq.n	8003f6e <TIM_Base_SetConfig+0xb2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a2c      	ldr	r2, [pc, #176]	@ (8003fec <TIM_Base_SetConfig+0x130>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d017      	beq.n	8003f6e <TIM_Base_SetConfig+0xb2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a2b      	ldr	r2, [pc, #172]	@ (8003ff0 <TIM_Base_SetConfig+0x134>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d013      	beq.n	8003f6e <TIM_Base_SetConfig+0xb2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a2a      	ldr	r2, [pc, #168]	@ (8003ff4 <TIM_Base_SetConfig+0x138>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d00f      	beq.n	8003f6e <TIM_Base_SetConfig+0xb2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a29      	ldr	r2, [pc, #164]	@ (8003ff8 <TIM_Base_SetConfig+0x13c>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d00b      	beq.n	8003f6e <TIM_Base_SetConfig+0xb2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a28      	ldr	r2, [pc, #160]	@ (8003ffc <TIM_Base_SetConfig+0x140>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d007      	beq.n	8003f6e <TIM_Base_SetConfig+0xb2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a27      	ldr	r2, [pc, #156]	@ (8004000 <TIM_Base_SetConfig+0x144>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d003      	beq.n	8003f6e <TIM_Base_SetConfig+0xb2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a26      	ldr	r2, [pc, #152]	@ (8004004 <TIM_Base_SetConfig+0x148>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d108      	bne.n	8003f80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a0e      	ldr	r2, [pc, #56]	@ (8003fdc <TIM_Base_SetConfig+0x120>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d003      	beq.n	8003fae <TIM_Base_SetConfig+0xf2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a10      	ldr	r2, [pc, #64]	@ (8003fec <TIM_Base_SetConfig+0x130>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d103      	bne.n	8003fb6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	691a      	ldr	r2, [r3, #16]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f043 0204 	orr.w	r2, r3, #4
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	601a      	str	r2, [r3, #0]
}
 8003fce:	bf00      	nop
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40010000 	.word	0x40010000
 8003fe0:	40000400 	.word	0x40000400
 8003fe4:	40000800 	.word	0x40000800
 8003fe8:	40000c00 	.word	0x40000c00
 8003fec:	40010400 	.word	0x40010400
 8003ff0:	40014000 	.word	0x40014000
 8003ff4:	40014400 	.word	0x40014400
 8003ff8:	40014800 	.word	0x40014800
 8003ffc:	40001800 	.word	0x40001800
 8004000:	40001c00 	.word	0x40001c00
 8004004:	40002000 	.word	0x40002000

08004008 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	f023 0201 	bic.w	r2, r3, #1
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0303 	bic.w	r3, r3, #3
 800403e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f023 0302 	bic.w	r3, r3, #2
 8004050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	4313      	orrs	r3, r2
 800405a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a20      	ldr	r2, [pc, #128]	@ (80040e0 <TIM_OC1_SetConfig+0xd8>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d003      	beq.n	800406c <TIM_OC1_SetConfig+0x64>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a1f      	ldr	r2, [pc, #124]	@ (80040e4 <TIM_OC1_SetConfig+0xdc>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d10c      	bne.n	8004086 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f023 0308 	bic.w	r3, r3, #8
 8004072:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	4313      	orrs	r3, r2
 800407c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f023 0304 	bic.w	r3, r3, #4
 8004084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a15      	ldr	r2, [pc, #84]	@ (80040e0 <TIM_OC1_SetConfig+0xd8>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d003      	beq.n	8004096 <TIM_OC1_SetConfig+0x8e>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a14      	ldr	r2, [pc, #80]	@ (80040e4 <TIM_OC1_SetConfig+0xdc>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d111      	bne.n	80040ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800409c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	621a      	str	r2, [r3, #32]
}
 80040d4:	bf00      	nop
 80040d6:	371c      	adds	r7, #28
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	40010000 	.word	0x40010000
 80040e4:	40010400 	.word	0x40010400

080040e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	f023 0210 	bic.w	r2, r3, #16
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800411e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	021b      	lsls	r3, r3, #8
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4313      	orrs	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f023 0320 	bic.w	r3, r3, #32
 8004132:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	4313      	orrs	r3, r2
 800413e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a22      	ldr	r2, [pc, #136]	@ (80041cc <TIM_OC2_SetConfig+0xe4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d003      	beq.n	8004150 <TIM_OC2_SetConfig+0x68>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a21      	ldr	r2, [pc, #132]	@ (80041d0 <TIM_OC2_SetConfig+0xe8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d10d      	bne.n	800416c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004156:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	4313      	orrs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800416a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a17      	ldr	r2, [pc, #92]	@ (80041cc <TIM_OC2_SetConfig+0xe4>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d003      	beq.n	800417c <TIM_OC2_SetConfig+0x94>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a16      	ldr	r2, [pc, #88]	@ (80041d0 <TIM_OC2_SetConfig+0xe8>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d113      	bne.n	80041a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004182:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800418a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	4313      	orrs	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	621a      	str	r2, [r3, #32]
}
 80041be:	bf00      	nop
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40010000 	.word	0x40010000
 80041d0:	40010400 	.word	0x40010400

080041d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 0303 	bic.w	r3, r3, #3
 800420a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800421c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	021b      	lsls	r3, r3, #8
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	4313      	orrs	r3, r2
 8004228:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a21      	ldr	r2, [pc, #132]	@ (80042b4 <TIM_OC3_SetConfig+0xe0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d003      	beq.n	800423a <TIM_OC3_SetConfig+0x66>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a20      	ldr	r2, [pc, #128]	@ (80042b8 <TIM_OC3_SetConfig+0xe4>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d10d      	bne.n	8004256 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004240:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	021b      	lsls	r3, r3, #8
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004254:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a16      	ldr	r2, [pc, #88]	@ (80042b4 <TIM_OC3_SetConfig+0xe0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d003      	beq.n	8004266 <TIM_OC3_SetConfig+0x92>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a15      	ldr	r2, [pc, #84]	@ (80042b8 <TIM_OC3_SetConfig+0xe4>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d113      	bne.n	800428e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800426c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004274:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	4313      	orrs	r3, r2
 800428c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	621a      	str	r2, [r3, #32]
}
 80042a8:	bf00      	nop
 80042aa:	371c      	adds	r7, #28
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	40010000 	.word	0x40010000
 80042b8:	40010400 	.word	0x40010400

080042bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	021b      	lsls	r3, r3, #8
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004306:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	031b      	lsls	r3, r3, #12
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	4313      	orrs	r3, r2
 8004312:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a12      	ldr	r2, [pc, #72]	@ (8004360 <TIM_OC4_SetConfig+0xa4>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d003      	beq.n	8004324 <TIM_OC4_SetConfig+0x68>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a11      	ldr	r2, [pc, #68]	@ (8004364 <TIM_OC4_SetConfig+0xa8>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d109      	bne.n	8004338 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800432a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	019b      	lsls	r3, r3, #6
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	4313      	orrs	r3, r2
 8004336:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	621a      	str	r2, [r3, #32]
}
 8004352:	bf00      	nop
 8004354:	371c      	adds	r7, #28
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40010000 	.word	0x40010000
 8004364:	40010400 	.word	0x40010400

08004368 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	f003 031f 	and.w	r3, r3, #31
 800437a:	2201      	movs	r2, #1
 800437c:	fa02 f303 	lsl.w	r3, r2, r3
 8004380:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6a1a      	ldr	r2, [r3, #32]
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	43db      	mvns	r3, r3
 800438a:	401a      	ands	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a1a      	ldr	r2, [r3, #32]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f003 031f 	and.w	r3, r3, #31
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	fa01 f303 	lsl.w	r3, r1, r3
 80043a0:	431a      	orrs	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	621a      	str	r2, [r3, #32]
}
 80043a6:	bf00      	nop
 80043a8:	371c      	adds	r7, #28
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
	...

080043b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d101      	bne.n	80043cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043c8:	2302      	movs	r3, #2
 80043ca:	e05a      	b.n	8004482 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a21      	ldr	r2, [pc, #132]	@ (8004490 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d022      	beq.n	8004456 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004418:	d01d      	beq.n	8004456 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a1d      	ldr	r2, [pc, #116]	@ (8004494 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d018      	beq.n	8004456 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a1b      	ldr	r2, [pc, #108]	@ (8004498 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d013      	beq.n	8004456 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a1a      	ldr	r2, [pc, #104]	@ (800449c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d00e      	beq.n	8004456 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a18      	ldr	r2, [pc, #96]	@ (80044a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d009      	beq.n	8004456 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a17      	ldr	r2, [pc, #92]	@ (80044a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d004      	beq.n	8004456 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a15      	ldr	r2, [pc, #84]	@ (80044a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d10c      	bne.n	8004470 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800445c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	4313      	orrs	r3, r2
 8004466:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	40010000 	.word	0x40010000
 8004494:	40000400 	.word	0x40000400
 8004498:	40000800 	.word	0x40000800
 800449c:	40000c00 	.word	0x40000c00
 80044a0:	40010400 	.word	0x40010400
 80044a4:	40014000 	.word	0x40014000
 80044a8:	40001800 	.word	0x40001800

080044ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e042      	b.n	800456c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d106      	bne.n	8004500 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7fd fee6 	bl	80022cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2224      	movs	r2, #36	@ 0x24
 8004504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68da      	ldr	r2, [r3, #12]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004516:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 fce5 	bl	8004ee8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	691a      	ldr	r2, [r3, #16]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800452c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695a      	ldr	r2, [r3, #20]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800453c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800454c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2220      	movs	r2, #32
 8004558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	4613      	mov	r3, r2
 8004580:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b20      	cmp	r3, #32
 800458c:	d112      	bne.n	80045b4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d002      	beq.n	800459a <HAL_UART_Receive_IT+0x26>
 8004594:	88fb      	ldrh	r3, [r7, #6]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e00b      	b.n	80045b6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80045a4:	88fb      	ldrh	r3, [r7, #6]
 80045a6:	461a      	mov	r2, r3
 80045a8:	68b9      	ldr	r1, [r7, #8]
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 fac8 	bl	8004b40 <UART_Start_Receive_IT>
 80045b0:	4603      	mov	r3, r0
 80045b2:	e000      	b.n	80045b6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80045b4:	2302      	movs	r3, #2
  }
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
	...

080045c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b0ba      	sub	sp, #232	@ 0xe8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045f6:	f003 030f 	and.w	r3, r3, #15
 80045fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80045fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10f      	bne.n	8004626 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800460a:	f003 0320 	and.w	r3, r3, #32
 800460e:	2b00      	cmp	r3, #0
 8004610:	d009      	beq.n	8004626 <HAL_UART_IRQHandler+0x66>
 8004612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fba4 	bl	8004d6c <UART_Receive_IT>
      return;
 8004624:	e273      	b.n	8004b0e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004626:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 80de 	beq.w	80047ec <HAL_UART_IRQHandler+0x22c>
 8004630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d106      	bne.n	800464a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800463c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004640:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 80d1 	beq.w	80047ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800464a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00b      	beq.n	800466e <HAL_UART_IRQHandler+0xae>
 8004656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800465a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800465e:	2b00      	cmp	r3, #0
 8004660:	d005      	beq.n	800466e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004666:	f043 0201 	orr.w	r2, r3, #1
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800466e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00b      	beq.n	8004692 <HAL_UART_IRQHandler+0xd2>
 800467a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d005      	beq.n	8004692 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800468a:	f043 0202 	orr.w	r2, r3, #2
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00b      	beq.n	80046b6 <HAL_UART_IRQHandler+0xf6>
 800469e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d005      	beq.n	80046b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ae:	f043 0204 	orr.w	r2, r3, #4
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80046b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ba:	f003 0308 	and.w	r3, r3, #8
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d011      	beq.n	80046e6 <HAL_UART_IRQHandler+0x126>
 80046c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046c6:	f003 0320 	and.w	r3, r3, #32
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d105      	bne.n	80046da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80046ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d005      	beq.n	80046e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046de:	f043 0208 	orr.w	r2, r3, #8
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 820a 	beq.w	8004b04 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046f4:	f003 0320 	and.w	r3, r3, #32
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d008      	beq.n	800470e <HAL_UART_IRQHandler+0x14e>
 80046fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004700:	f003 0320 	and.w	r3, r3, #32
 8004704:	2b00      	cmp	r3, #0
 8004706:	d002      	beq.n	800470e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 fb2f 	bl	8004d6c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004718:	2b40      	cmp	r3, #64	@ 0x40
 800471a:	bf0c      	ite	eq
 800471c:	2301      	moveq	r3, #1
 800471e:	2300      	movne	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d103      	bne.n	800473a <HAL_UART_IRQHandler+0x17a>
 8004732:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004736:	2b00      	cmp	r3, #0
 8004738:	d04f      	beq.n	80047da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 fa3a 	bl	8004bb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800474a:	2b40      	cmp	r3, #64	@ 0x40
 800474c:	d141      	bne.n	80047d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3314      	adds	r3, #20
 8004754:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004758:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800475c:	e853 3f00 	ldrex	r3, [r3]
 8004760:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004764:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004768:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800476c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	3314      	adds	r3, #20
 8004776:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800477a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800477e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004782:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004786:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800478a:	e841 2300 	strex	r3, r2, [r1]
 800478e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004792:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1d9      	bne.n	800474e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d013      	beq.n	80047ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a6:	4a8a      	ldr	r2, [pc, #552]	@ (80049d0 <HAL_UART_IRQHandler+0x410>)
 80047a8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fe f873 	bl	800289a <HAL_DMA_Abort_IT>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d016      	beq.n	80047e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80047c4:	4610      	mov	r0, r2
 80047c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c8:	e00e      	b.n	80047e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f9a2 	bl	8004b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d0:	e00a      	b.n	80047e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f99e 	bl	8004b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d8:	e006      	b.n	80047e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f99a 	bl	8004b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80047e6:	e18d      	b.n	8004b04 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e8:	bf00      	nop
    return;
 80047ea:	e18b      	b.n	8004b04 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	f040 8167 	bne.w	8004ac4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80047f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047fa:	f003 0310 	and.w	r3, r3, #16
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f000 8160 	beq.w	8004ac4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004808:	f003 0310 	and.w	r3, r3, #16
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 8159 	beq.w	8004ac4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004812:	2300      	movs	r3, #0
 8004814:	60bb      	str	r3, [r7, #8]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	60bb      	str	r3, [r7, #8]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	60bb      	str	r3, [r7, #8]
 8004826:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004832:	2b40      	cmp	r3, #64	@ 0x40
 8004834:	f040 80ce 	bne.w	80049d4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004844:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 80a9 	beq.w	80049a0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004852:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004856:	429a      	cmp	r2, r3
 8004858:	f080 80a2 	bcs.w	80049a0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004862:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800486e:	f000 8088 	beq.w	8004982 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	330c      	adds	r3, #12
 8004878:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004880:	e853 3f00 	ldrex	r3, [r3]
 8004884:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004888:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800488c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004890:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	330c      	adds	r3, #12
 800489a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800489e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80048aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80048ae:	e841 2300 	strex	r3, r2, [r1]
 80048b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80048b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1d9      	bne.n	8004872 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	3314      	adds	r3, #20
 80048c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048c8:	e853 3f00 	ldrex	r3, [r3]
 80048cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80048ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048d0:	f023 0301 	bic.w	r3, r3, #1
 80048d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3314      	adds	r3, #20
 80048de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80048e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80048e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80048ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80048ee:	e841 2300 	strex	r3, r2, [r1]
 80048f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80048f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1e1      	bne.n	80048be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	3314      	adds	r3, #20
 8004900:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004902:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004904:	e853 3f00 	ldrex	r3, [r3]
 8004908:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800490a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800490c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004910:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3314      	adds	r3, #20
 800491a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800491e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004920:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004922:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004924:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004926:	e841 2300 	strex	r3, r2, [r1]
 800492a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800492c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1e3      	bne.n	80048fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2220      	movs	r2, #32
 8004936:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	330c      	adds	r3, #12
 8004946:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004948:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800494a:	e853 3f00 	ldrex	r3, [r3]
 800494e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004950:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004952:	f023 0310 	bic.w	r3, r3, #16
 8004956:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	330c      	adds	r3, #12
 8004960:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004964:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004966:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004968:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800496a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800496c:	e841 2300 	strex	r3, r2, [r1]
 8004970:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004972:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1e3      	bne.n	8004940 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800497c:	4618      	mov	r0, r3
 800497e:	f7fd ff1c 	bl	80027ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2202      	movs	r2, #2
 8004986:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004990:	b29b      	uxth	r3, r3
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	b29b      	uxth	r3, r3
 8004996:	4619      	mov	r1, r3
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 f8c5 	bl	8004b28 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800499e:	e0b3      	b.n	8004b08 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80049a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80049a8:	429a      	cmp	r2, r3
 80049aa:	f040 80ad 	bne.w	8004b08 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049b2:	69db      	ldr	r3, [r3, #28]
 80049b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049b8:	f040 80a6 	bne.w	8004b08 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80049c6:	4619      	mov	r1, r3
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 f8ad 	bl	8004b28 <HAL_UARTEx_RxEventCallback>
      return;
 80049ce:	e09b      	b.n	8004b08 <HAL_UART_IRQHandler+0x548>
 80049d0:	08004c7b 	.word	0x08004c7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049dc:	b29b      	uxth	r3, r3
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 808e 	beq.w	8004b0c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80049f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 8089 	beq.w	8004b0c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	330c      	adds	r3, #12
 8004a00:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a04:	e853 3f00 	ldrex	r3, [r3]
 8004a08:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	330c      	adds	r3, #12
 8004a1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004a1e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a26:	e841 2300 	strex	r3, r2, [r1]
 8004a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1e3      	bne.n	80049fa <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	3314      	adds	r3, #20
 8004a38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3c:	e853 3f00 	ldrex	r3, [r3]
 8004a40:	623b      	str	r3, [r7, #32]
   return(result);
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	f023 0301 	bic.w	r3, r3, #1
 8004a48:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3314      	adds	r3, #20
 8004a52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004a56:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a5e:	e841 2300 	strex	r3, r2, [r1]
 8004a62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1e3      	bne.n	8004a32 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	330c      	adds	r3, #12
 8004a7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	e853 3f00 	ldrex	r3, [r3]
 8004a86:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f023 0310 	bic.w	r3, r3, #16
 8004a8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	330c      	adds	r3, #12
 8004a98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004a9c:	61fa      	str	r2, [r7, #28]
 8004a9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa0:	69b9      	ldr	r1, [r7, #24]
 8004aa2:	69fa      	ldr	r2, [r7, #28]
 8004aa4:	e841 2300 	strex	r3, r2, [r1]
 8004aa8:	617b      	str	r3, [r7, #20]
   return(result);
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1e3      	bne.n	8004a78 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ab6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004aba:	4619      	mov	r1, r3
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f833 	bl	8004b28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ac2:	e023      	b.n	8004b0c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ac8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d009      	beq.n	8004ae4 <HAL_UART_IRQHandler+0x524>
 8004ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f8dd 	bl	8004c9c <UART_Transmit_IT>
    return;
 8004ae2:	e014      	b.n	8004b0e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00e      	beq.n	8004b0e <HAL_UART_IRQHandler+0x54e>
 8004af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d008      	beq.n	8004b0e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f91d 	bl	8004d3c <UART_EndTransmit_IT>
    return;
 8004b02:	e004      	b.n	8004b0e <HAL_UART_IRQHandler+0x54e>
    return;
 8004b04:	bf00      	nop
 8004b06:	e002      	b.n	8004b0e <HAL_UART_IRQHandler+0x54e>
      return;
 8004b08:	bf00      	nop
 8004b0a:	e000      	b.n	8004b0e <HAL_UART_IRQHandler+0x54e>
      return;
 8004b0c:	bf00      	nop
  }
}
 8004b0e:	37e8      	adds	r7, #232	@ 0xe8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	460b      	mov	r3, r1
 8004b32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	88fa      	ldrh	r2, [r7, #6]
 8004b58:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	88fa      	ldrh	r2, [r7, #6]
 8004b5e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2222      	movs	r2, #34	@ 0x22
 8004b6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d007      	beq.n	8004b86 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68da      	ldr	r2, [r3, #12]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b84:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695a      	ldr	r2, [r3, #20]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f042 0201 	orr.w	r2, r2, #1
 8004b94:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68da      	ldr	r2, [r3, #12]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f042 0220 	orr.w	r2, r2, #32
 8004ba4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b095      	sub	sp, #84	@ 0x54
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	330c      	adds	r3, #12
 8004bc2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc6:	e853 3f00 	ldrex	r3, [r3]
 8004bca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	330c      	adds	r3, #12
 8004bda:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bdc:	643a      	str	r2, [r7, #64]	@ 0x40
 8004bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004be2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004be4:	e841 2300 	strex	r3, r2, [r1]
 8004be8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1e5      	bne.n	8004bbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	3314      	adds	r3, #20
 8004bf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	e853 3f00 	ldrex	r3, [r3]
 8004bfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	f023 0301 	bic.w	r3, r3, #1
 8004c06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3314      	adds	r3, #20
 8004c0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c10:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c18:	e841 2300 	strex	r3, r2, [r1]
 8004c1c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e5      	bne.n	8004bf0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d119      	bne.n	8004c60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	330c      	adds	r3, #12
 8004c32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	e853 3f00 	ldrex	r3, [r3]
 8004c3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f023 0310 	bic.w	r3, r3, #16
 8004c42:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	330c      	adds	r3, #12
 8004c4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c4c:	61ba      	str	r2, [r7, #24]
 8004c4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c50:	6979      	ldr	r1, [r7, #20]
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	e841 2300 	strex	r3, r2, [r1]
 8004c58:	613b      	str	r3, [r7, #16]
   return(result);
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1e5      	bne.n	8004c2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004c6e:	bf00      	nop
 8004c70:	3754      	adds	r7, #84	@ 0x54
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b084      	sub	sp, #16
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f7ff ff40 	bl	8004b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c94:	bf00      	nop
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	2b21      	cmp	r3, #33	@ 0x21
 8004cae:	d13e      	bne.n	8004d2e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cb8:	d114      	bne.n	8004ce4 <UART_Transmit_IT+0x48>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d110      	bne.n	8004ce4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	881b      	ldrh	r3, [r3, #0]
 8004ccc:	461a      	mov	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cd6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	1c9a      	adds	r2, r3, #2
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	621a      	str	r2, [r3, #32]
 8004ce2:	e008      	b.n	8004cf6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	1c59      	adds	r1, r3, #1
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6211      	str	r1, [r2, #32]
 8004cee:	781a      	ldrb	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	4619      	mov	r1, r3
 8004d04:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10f      	bne.n	8004d2a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68da      	ldr	r2, [r3, #12]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d18:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68da      	ldr	r2, [r3, #12]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d28:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	e000      	b.n	8004d30 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d2e:	2302      	movs	r3, #2
  }
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d52:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2220      	movs	r2, #32
 8004d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7fd f8f5 	bl	8001f4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3708      	adds	r7, #8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08c      	sub	sp, #48	@ 0x30
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004d74:	2300      	movs	r3, #0
 8004d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b22      	cmp	r3, #34	@ 0x22
 8004d86:	f040 80aa 	bne.w	8004ede <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d92:	d115      	bne.n	8004dc0 <UART_Receive_IT+0x54>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d111      	bne.n	8004dc0 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db8:	1c9a      	adds	r2, r3, #2
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	629a      	str	r2, [r3, #40]	@ 0x28
 8004dbe:	e024      	b.n	8004e0a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dce:	d007      	beq.n	8004de0 <UART_Receive_IT+0x74>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10a      	bne.n	8004dee <UART_Receive_IT+0x82>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d106      	bne.n	8004dee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dea:	701a      	strb	r2, [r3, #0]
 8004dec:	e008      	b.n	8004e00 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dfe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	3b01      	subs	r3, #1
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	4619      	mov	r1, r3
 8004e18:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d15d      	bne.n	8004eda <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68da      	ldr	r2, [r3, #12]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0220 	bic.w	r2, r2, #32
 8004e2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68da      	ldr	r2, [r3, #12]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	695a      	ldr	r2, [r3, #20]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0201 	bic.w	r2, r2, #1
 8004e4c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2220      	movs	r2, #32
 8004e52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d135      	bne.n	8004ed0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	330c      	adds	r3, #12
 8004e70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	e853 3f00 	ldrex	r3, [r3]
 8004e78:	613b      	str	r3, [r7, #16]
   return(result);
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	f023 0310 	bic.w	r3, r3, #16
 8004e80:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	330c      	adds	r3, #12
 8004e88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e8a:	623a      	str	r2, [r7, #32]
 8004e8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8e:	69f9      	ldr	r1, [r7, #28]
 8004e90:	6a3a      	ldr	r2, [r7, #32]
 8004e92:	e841 2300 	strex	r3, r2, [r1]
 8004e96:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1e5      	bne.n	8004e6a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0310 	and.w	r3, r3, #16
 8004ea8:	2b10      	cmp	r3, #16
 8004eaa:	d10a      	bne.n	8004ec2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f7ff fe2d 	bl	8004b28 <HAL_UARTEx_RxEventCallback>
 8004ece:	e002      	b.n	8004ed6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7fd f821 	bl	8001f18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	e002      	b.n	8004ee0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	e000      	b.n	8004ee0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ede:	2302      	movs	r3, #2
  }
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3730      	adds	r7, #48	@ 0x30
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eec:	b0c0      	sub	sp, #256	@ 0x100
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f04:	68d9      	ldr	r1, [r3, #12]
 8004f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	ea40 0301 	orr.w	r3, r0, r1
 8004f10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	431a      	orrs	r2, r3
 8004f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004f40:	f021 010c 	bic.w	r1, r1, #12
 8004f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004f4e:	430b      	orrs	r3, r1
 8004f50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f62:	6999      	ldr	r1, [r3, #24]
 8004f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	ea40 0301 	orr.w	r3, r0, r1
 8004f6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	4b8f      	ldr	r3, [pc, #572]	@ (80051b4 <UART_SetConfig+0x2cc>)
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d005      	beq.n	8004f88 <UART_SetConfig+0xa0>
 8004f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	4b8d      	ldr	r3, [pc, #564]	@ (80051b8 <UART_SetConfig+0x2d0>)
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d104      	bne.n	8004f92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f88:	f7fe fae4 	bl	8003554 <HAL_RCC_GetPCLK2Freq>
 8004f8c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004f90:	e003      	b.n	8004f9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f92:	f7fe facb 	bl	800352c <HAL_RCC_GetPCLK1Freq>
 8004f96:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fa4:	f040 810c 	bne.w	80051c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fac:	2200      	movs	r2, #0
 8004fae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004fb2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004fb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004fba:	4622      	mov	r2, r4
 8004fbc:	462b      	mov	r3, r5
 8004fbe:	1891      	adds	r1, r2, r2
 8004fc0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004fc2:	415b      	adcs	r3, r3
 8004fc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004fc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004fca:	4621      	mov	r1, r4
 8004fcc:	eb12 0801 	adds.w	r8, r2, r1
 8004fd0:	4629      	mov	r1, r5
 8004fd2:	eb43 0901 	adc.w	r9, r3, r1
 8004fd6:	f04f 0200 	mov.w	r2, #0
 8004fda:	f04f 0300 	mov.w	r3, #0
 8004fde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fe2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fe6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fea:	4690      	mov	r8, r2
 8004fec:	4699      	mov	r9, r3
 8004fee:	4623      	mov	r3, r4
 8004ff0:	eb18 0303 	adds.w	r3, r8, r3
 8004ff4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ff8:	462b      	mov	r3, r5
 8004ffa:	eb49 0303 	adc.w	r3, r9, r3
 8004ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800500e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005012:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005016:	460b      	mov	r3, r1
 8005018:	18db      	adds	r3, r3, r3
 800501a:	653b      	str	r3, [r7, #80]	@ 0x50
 800501c:	4613      	mov	r3, r2
 800501e:	eb42 0303 	adc.w	r3, r2, r3
 8005022:	657b      	str	r3, [r7, #84]	@ 0x54
 8005024:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005028:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800502c:	f7fb fcea 	bl	8000a04 <__aeabi_uldivmod>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	4b61      	ldr	r3, [pc, #388]	@ (80051bc <UART_SetConfig+0x2d4>)
 8005036:	fba3 2302 	umull	r2, r3, r3, r2
 800503a:	095b      	lsrs	r3, r3, #5
 800503c:	011c      	lsls	r4, r3, #4
 800503e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005042:	2200      	movs	r2, #0
 8005044:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005048:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800504c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005050:	4642      	mov	r2, r8
 8005052:	464b      	mov	r3, r9
 8005054:	1891      	adds	r1, r2, r2
 8005056:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005058:	415b      	adcs	r3, r3
 800505a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800505c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005060:	4641      	mov	r1, r8
 8005062:	eb12 0a01 	adds.w	sl, r2, r1
 8005066:	4649      	mov	r1, r9
 8005068:	eb43 0b01 	adc.w	fp, r3, r1
 800506c:	f04f 0200 	mov.w	r2, #0
 8005070:	f04f 0300 	mov.w	r3, #0
 8005074:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005078:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800507c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005080:	4692      	mov	sl, r2
 8005082:	469b      	mov	fp, r3
 8005084:	4643      	mov	r3, r8
 8005086:	eb1a 0303 	adds.w	r3, sl, r3
 800508a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800508e:	464b      	mov	r3, r9
 8005090:	eb4b 0303 	adc.w	r3, fp, r3
 8005094:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80050a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80050ac:	460b      	mov	r3, r1
 80050ae:	18db      	adds	r3, r3, r3
 80050b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80050b2:	4613      	mov	r3, r2
 80050b4:	eb42 0303 	adc.w	r3, r2, r3
 80050b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80050ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80050be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80050c2:	f7fb fc9f 	bl	8000a04 <__aeabi_uldivmod>
 80050c6:	4602      	mov	r2, r0
 80050c8:	460b      	mov	r3, r1
 80050ca:	4611      	mov	r1, r2
 80050cc:	4b3b      	ldr	r3, [pc, #236]	@ (80051bc <UART_SetConfig+0x2d4>)
 80050ce:	fba3 2301 	umull	r2, r3, r3, r1
 80050d2:	095b      	lsrs	r3, r3, #5
 80050d4:	2264      	movs	r2, #100	@ 0x64
 80050d6:	fb02 f303 	mul.w	r3, r2, r3
 80050da:	1acb      	subs	r3, r1, r3
 80050dc:	00db      	lsls	r3, r3, #3
 80050de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80050e2:	4b36      	ldr	r3, [pc, #216]	@ (80051bc <UART_SetConfig+0x2d4>)
 80050e4:	fba3 2302 	umull	r2, r3, r3, r2
 80050e8:	095b      	lsrs	r3, r3, #5
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80050f0:	441c      	add	r4, r3
 80050f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050f6:	2200      	movs	r2, #0
 80050f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005100:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005104:	4642      	mov	r2, r8
 8005106:	464b      	mov	r3, r9
 8005108:	1891      	adds	r1, r2, r2
 800510a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800510c:	415b      	adcs	r3, r3
 800510e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005110:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005114:	4641      	mov	r1, r8
 8005116:	1851      	adds	r1, r2, r1
 8005118:	6339      	str	r1, [r7, #48]	@ 0x30
 800511a:	4649      	mov	r1, r9
 800511c:	414b      	adcs	r3, r1
 800511e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005120:	f04f 0200 	mov.w	r2, #0
 8005124:	f04f 0300 	mov.w	r3, #0
 8005128:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800512c:	4659      	mov	r1, fp
 800512e:	00cb      	lsls	r3, r1, #3
 8005130:	4651      	mov	r1, sl
 8005132:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005136:	4651      	mov	r1, sl
 8005138:	00ca      	lsls	r2, r1, #3
 800513a:	4610      	mov	r0, r2
 800513c:	4619      	mov	r1, r3
 800513e:	4603      	mov	r3, r0
 8005140:	4642      	mov	r2, r8
 8005142:	189b      	adds	r3, r3, r2
 8005144:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005148:	464b      	mov	r3, r9
 800514a:	460a      	mov	r2, r1
 800514c:	eb42 0303 	adc.w	r3, r2, r3
 8005150:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005160:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005164:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005168:	460b      	mov	r3, r1
 800516a:	18db      	adds	r3, r3, r3
 800516c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800516e:	4613      	mov	r3, r2
 8005170:	eb42 0303 	adc.w	r3, r2, r3
 8005174:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005176:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800517a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800517e:	f7fb fc41 	bl	8000a04 <__aeabi_uldivmod>
 8005182:	4602      	mov	r2, r0
 8005184:	460b      	mov	r3, r1
 8005186:	4b0d      	ldr	r3, [pc, #52]	@ (80051bc <UART_SetConfig+0x2d4>)
 8005188:	fba3 1302 	umull	r1, r3, r3, r2
 800518c:	095b      	lsrs	r3, r3, #5
 800518e:	2164      	movs	r1, #100	@ 0x64
 8005190:	fb01 f303 	mul.w	r3, r1, r3
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	3332      	adds	r3, #50	@ 0x32
 800519a:	4a08      	ldr	r2, [pc, #32]	@ (80051bc <UART_SetConfig+0x2d4>)
 800519c:	fba2 2303 	umull	r2, r3, r2, r3
 80051a0:	095b      	lsrs	r3, r3, #5
 80051a2:	f003 0207 	and.w	r2, r3, #7
 80051a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4422      	add	r2, r4
 80051ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051b0:	e106      	b.n	80053c0 <UART_SetConfig+0x4d8>
 80051b2:	bf00      	nop
 80051b4:	40011000 	.word	0x40011000
 80051b8:	40011400 	.word	0x40011400
 80051bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051c4:	2200      	movs	r2, #0
 80051c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80051ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80051ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80051d2:	4642      	mov	r2, r8
 80051d4:	464b      	mov	r3, r9
 80051d6:	1891      	adds	r1, r2, r2
 80051d8:	6239      	str	r1, [r7, #32]
 80051da:	415b      	adcs	r3, r3
 80051dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80051de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051e2:	4641      	mov	r1, r8
 80051e4:	1854      	adds	r4, r2, r1
 80051e6:	4649      	mov	r1, r9
 80051e8:	eb43 0501 	adc.w	r5, r3, r1
 80051ec:	f04f 0200 	mov.w	r2, #0
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	00eb      	lsls	r3, r5, #3
 80051f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051fa:	00e2      	lsls	r2, r4, #3
 80051fc:	4614      	mov	r4, r2
 80051fe:	461d      	mov	r5, r3
 8005200:	4643      	mov	r3, r8
 8005202:	18e3      	adds	r3, r4, r3
 8005204:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005208:	464b      	mov	r3, r9
 800520a:	eb45 0303 	adc.w	r3, r5, r3
 800520e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800521e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005222:	f04f 0200 	mov.w	r2, #0
 8005226:	f04f 0300 	mov.w	r3, #0
 800522a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800522e:	4629      	mov	r1, r5
 8005230:	008b      	lsls	r3, r1, #2
 8005232:	4621      	mov	r1, r4
 8005234:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005238:	4621      	mov	r1, r4
 800523a:	008a      	lsls	r2, r1, #2
 800523c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005240:	f7fb fbe0 	bl	8000a04 <__aeabi_uldivmod>
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	4b60      	ldr	r3, [pc, #384]	@ (80053cc <UART_SetConfig+0x4e4>)
 800524a:	fba3 2302 	umull	r2, r3, r3, r2
 800524e:	095b      	lsrs	r3, r3, #5
 8005250:	011c      	lsls	r4, r3, #4
 8005252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005256:	2200      	movs	r2, #0
 8005258:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800525c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005260:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005264:	4642      	mov	r2, r8
 8005266:	464b      	mov	r3, r9
 8005268:	1891      	adds	r1, r2, r2
 800526a:	61b9      	str	r1, [r7, #24]
 800526c:	415b      	adcs	r3, r3
 800526e:	61fb      	str	r3, [r7, #28]
 8005270:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005274:	4641      	mov	r1, r8
 8005276:	1851      	adds	r1, r2, r1
 8005278:	6139      	str	r1, [r7, #16]
 800527a:	4649      	mov	r1, r9
 800527c:	414b      	adcs	r3, r1
 800527e:	617b      	str	r3, [r7, #20]
 8005280:	f04f 0200 	mov.w	r2, #0
 8005284:	f04f 0300 	mov.w	r3, #0
 8005288:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800528c:	4659      	mov	r1, fp
 800528e:	00cb      	lsls	r3, r1, #3
 8005290:	4651      	mov	r1, sl
 8005292:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005296:	4651      	mov	r1, sl
 8005298:	00ca      	lsls	r2, r1, #3
 800529a:	4610      	mov	r0, r2
 800529c:	4619      	mov	r1, r3
 800529e:	4603      	mov	r3, r0
 80052a0:	4642      	mov	r2, r8
 80052a2:	189b      	adds	r3, r3, r2
 80052a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80052a8:	464b      	mov	r3, r9
 80052aa:	460a      	mov	r2, r1
 80052ac:	eb42 0303 	adc.w	r3, r2, r3
 80052b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80052b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80052be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80052c0:	f04f 0200 	mov.w	r2, #0
 80052c4:	f04f 0300 	mov.w	r3, #0
 80052c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80052cc:	4649      	mov	r1, r9
 80052ce:	008b      	lsls	r3, r1, #2
 80052d0:	4641      	mov	r1, r8
 80052d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052d6:	4641      	mov	r1, r8
 80052d8:	008a      	lsls	r2, r1, #2
 80052da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80052de:	f7fb fb91 	bl	8000a04 <__aeabi_uldivmod>
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	4611      	mov	r1, r2
 80052e8:	4b38      	ldr	r3, [pc, #224]	@ (80053cc <UART_SetConfig+0x4e4>)
 80052ea:	fba3 2301 	umull	r2, r3, r3, r1
 80052ee:	095b      	lsrs	r3, r3, #5
 80052f0:	2264      	movs	r2, #100	@ 0x64
 80052f2:	fb02 f303 	mul.w	r3, r2, r3
 80052f6:	1acb      	subs	r3, r1, r3
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	3332      	adds	r3, #50	@ 0x32
 80052fc:	4a33      	ldr	r2, [pc, #204]	@ (80053cc <UART_SetConfig+0x4e4>)
 80052fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005302:	095b      	lsrs	r3, r3, #5
 8005304:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005308:	441c      	add	r4, r3
 800530a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800530e:	2200      	movs	r2, #0
 8005310:	673b      	str	r3, [r7, #112]	@ 0x70
 8005312:	677a      	str	r2, [r7, #116]	@ 0x74
 8005314:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005318:	4642      	mov	r2, r8
 800531a:	464b      	mov	r3, r9
 800531c:	1891      	adds	r1, r2, r2
 800531e:	60b9      	str	r1, [r7, #8]
 8005320:	415b      	adcs	r3, r3
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005328:	4641      	mov	r1, r8
 800532a:	1851      	adds	r1, r2, r1
 800532c:	6039      	str	r1, [r7, #0]
 800532e:	4649      	mov	r1, r9
 8005330:	414b      	adcs	r3, r1
 8005332:	607b      	str	r3, [r7, #4]
 8005334:	f04f 0200 	mov.w	r2, #0
 8005338:	f04f 0300 	mov.w	r3, #0
 800533c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005340:	4659      	mov	r1, fp
 8005342:	00cb      	lsls	r3, r1, #3
 8005344:	4651      	mov	r1, sl
 8005346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800534a:	4651      	mov	r1, sl
 800534c:	00ca      	lsls	r2, r1, #3
 800534e:	4610      	mov	r0, r2
 8005350:	4619      	mov	r1, r3
 8005352:	4603      	mov	r3, r0
 8005354:	4642      	mov	r2, r8
 8005356:	189b      	adds	r3, r3, r2
 8005358:	66bb      	str	r3, [r7, #104]	@ 0x68
 800535a:	464b      	mov	r3, r9
 800535c:	460a      	mov	r2, r1
 800535e:	eb42 0303 	adc.w	r3, r2, r3
 8005362:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	663b      	str	r3, [r7, #96]	@ 0x60
 800536e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005370:	f04f 0200 	mov.w	r2, #0
 8005374:	f04f 0300 	mov.w	r3, #0
 8005378:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800537c:	4649      	mov	r1, r9
 800537e:	008b      	lsls	r3, r1, #2
 8005380:	4641      	mov	r1, r8
 8005382:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005386:	4641      	mov	r1, r8
 8005388:	008a      	lsls	r2, r1, #2
 800538a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800538e:	f7fb fb39 	bl	8000a04 <__aeabi_uldivmod>
 8005392:	4602      	mov	r2, r0
 8005394:	460b      	mov	r3, r1
 8005396:	4b0d      	ldr	r3, [pc, #52]	@ (80053cc <UART_SetConfig+0x4e4>)
 8005398:	fba3 1302 	umull	r1, r3, r3, r2
 800539c:	095b      	lsrs	r3, r3, #5
 800539e:	2164      	movs	r1, #100	@ 0x64
 80053a0:	fb01 f303 	mul.w	r3, r1, r3
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	3332      	adds	r3, #50	@ 0x32
 80053aa:	4a08      	ldr	r2, [pc, #32]	@ (80053cc <UART_SetConfig+0x4e4>)
 80053ac:	fba2 2303 	umull	r2, r3, r2, r3
 80053b0:	095b      	lsrs	r3, r3, #5
 80053b2:	f003 020f 	and.w	r2, r3, #15
 80053b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4422      	add	r2, r4
 80053be:	609a      	str	r2, [r3, #8]
}
 80053c0:	bf00      	nop
 80053c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80053c6:	46bd      	mov	sp, r7
 80053c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053cc:	51eb851f 	.word	0x51eb851f

080053d0 <memset>:
 80053d0:	4402      	add	r2, r0
 80053d2:	4603      	mov	r3, r0
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d100      	bne.n	80053da <memset+0xa>
 80053d8:	4770      	bx	lr
 80053da:	f803 1b01 	strb.w	r1, [r3], #1
 80053de:	e7f9      	b.n	80053d4 <memset+0x4>

080053e0 <__libc_init_array>:
 80053e0:	b570      	push	{r4, r5, r6, lr}
 80053e2:	4d0d      	ldr	r5, [pc, #52]	@ (8005418 <__libc_init_array+0x38>)
 80053e4:	4c0d      	ldr	r4, [pc, #52]	@ (800541c <__libc_init_array+0x3c>)
 80053e6:	1b64      	subs	r4, r4, r5
 80053e8:	10a4      	asrs	r4, r4, #2
 80053ea:	2600      	movs	r6, #0
 80053ec:	42a6      	cmp	r6, r4
 80053ee:	d109      	bne.n	8005404 <__libc_init_array+0x24>
 80053f0:	4d0b      	ldr	r5, [pc, #44]	@ (8005420 <__libc_init_array+0x40>)
 80053f2:	4c0c      	ldr	r4, [pc, #48]	@ (8005424 <__libc_init_array+0x44>)
 80053f4:	f000 f818 	bl	8005428 <_init>
 80053f8:	1b64      	subs	r4, r4, r5
 80053fa:	10a4      	asrs	r4, r4, #2
 80053fc:	2600      	movs	r6, #0
 80053fe:	42a6      	cmp	r6, r4
 8005400:	d105      	bne.n	800540e <__libc_init_array+0x2e>
 8005402:	bd70      	pop	{r4, r5, r6, pc}
 8005404:	f855 3b04 	ldr.w	r3, [r5], #4
 8005408:	4798      	blx	r3
 800540a:	3601      	adds	r6, #1
 800540c:	e7ee      	b.n	80053ec <__libc_init_array+0xc>
 800540e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005412:	4798      	blx	r3
 8005414:	3601      	adds	r6, #1
 8005416:	e7f2      	b.n	80053fe <__libc_init_array+0x1e>
 8005418:	08005460 	.word	0x08005460
 800541c:	08005460 	.word	0x08005460
 8005420:	08005460 	.word	0x08005460
 8005424:	08005464 	.word	0x08005464

08005428 <_init>:
 8005428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542a:	bf00      	nop
 800542c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800542e:	bc08      	pop	{r3}
 8005430:	469e      	mov	lr, r3
 8005432:	4770      	bx	lr

08005434 <_fini>:
 8005434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005436:	bf00      	nop
 8005438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800543a:	bc08      	pop	{r3}
 800543c:	469e      	mov	lr, r3
 800543e:	4770      	bx	lr
